<%- include('../partials/header', {title: 'Cấu hình Database'}) %>

<div class="container">
  <%- include('../partials/navbar') %>

  <div class="form-content">
    <div class="form-group">
      <label>IP Database của bạn<span class="required">*</span></label>
      <input type="text" id="dbHost" placeholder="Ví dụ: 1.2.3.4 hoặc 1.2.3.4:1234" required>
    </div>

    <div class="form-group">
      <label>Tên database của bạn<span class="required">*</span></label>
      <input type="text" id="dbName" placeholder="Database name ở đây..." required>
    </div>

    <div class="auth-toggle">
      <label class="switch">
        <input type="checkbox" id="useAuth">
        <span class="slider"></span>
      </label>
      <span class="toggle-label">Bật nếu database của bạn sử dụng xác thực</span>
    </div>

    <div id="authFields" class="auth-fields hidden">
      <div class="form-group">
        <label>Tên người dùng của bạn<span class="required">*</span></label>
        <input type="text" id="dbUsername" placeholder="Tên người dùng Database ở đây...">
      </div>

      <div class="form-group">
        <label>Mật khẩu của bạn<span class="required">*</span></label>
        <input type="text" id="dbPassword" placeholder="Mật khẩu Database ở đây...">
      </div>
    </div>
  </div>
</div>

<%- contentFor('style') %>
<link rel="stylesheet" href="/easysetup/public/css/database.css">

<%- contentFor('script') %>
<script>
  let useAuthCheckbox, authFields, dbUsernameInput, dbPasswordInput;
  // === Logic ẩn/hiện trường xác thực ===
  // Hàm này cần ở scope toàn cục để các hàm khác gọi được
  function toggleAuthFields() {
    const isAuthEnabled = useAuthCheckbox.checked;
    authFields.classList.toggle('hidden', !isAuthEnabled);
    dbUsernameInput.required = isAuthEnabled;
    dbPasswordInput.required = isAuthEnabled;
    if (!isAuthEnabled) {
      dbUsernameInput.value = '';
      dbPasswordInput.value = '';
      // Cập nhật giá trị rỗng vào config
      updateConfig('mongodb.auth.username', '');
      updateConfig('mongodb.auth.password', '');
    }
  }

  // Hàm cập nhật config, cũng cần ở scope toàn cục
  const updateConfig = async (key, value) => {
    try {
      await fetch('/api/update-config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          key,
          value
        }),
      });
    } catch (error) {
      console.error('Lỗi khi cập nhật config:', error);
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    // Gán biến toàn cục cho các trường input
    useAuthCheckbox = document.getElementById('useAuth');
    authFields = document.getElementById('authFields');
    dbUsernameInput = document.getElementById('dbUsername');
    dbPasswordInput = document.getElementById('dbPassword');

    // Danh sách các trường input và key tương ứng
    const inputs = [{
        id: 'dbHost',
        key: 'mongodb.ip'
      },
      {
        id: 'dbName',
        key: 'mongodb.database'
      },
      {
        id: 'useAuth',
        key: 'mongodb.auth.enabled',
        type: 'checkbox'
      },
      {
        id: 'dbUsername',
        key: 'mongodb.auth.username'
      },
      {
        id: 'dbPassword',
        key: 'mongodb.auth.password'
      },
    ];

    // Lấy config và điền vào form
    fetch('/api/get-config')
      .then(res => res.json())
      .then(config => {
        // Hiển thị ip:port nếu port khác mặc định, chỉ ip nếu là mặc định
        const ip = config.mongodb?.ip || '';
        const port = config.mongodb?.port;
        let ipDisplay = ip;
        if (port && port !== 27017) {
          ipDisplay = ip + ':' + port;
        }
        document.getElementById('dbHost').value = ipDisplay;
        document.getElementById('dbName').value = config.mongodb?.database || '';
        useAuthCheckbox.checked = config.mongodb?.auth?.enabled ?? false;
        dbUsernameInput.value = config.mongodb?.auth?.username || '';
        dbPasswordInput.value = config.mongodb?.auth?.password || '';

        // Cập nhật trạng thái hiển thị của trường xác thực
        toggleAuthFields();
      });

    // Thêm event listener cho các trường input
    inputs.forEach(({
      id,
      key,
      type
    }) => {
      const element = document.getElementById(id);
      const event = type === 'checkbox' ? 'change' : 'input';
      const getValue = () => type === 'checkbox' ? element.checked : element.value;

      element.addEventListener(event, () => {
        let value = getValue();
        // Nếu là trường dbHost
        if (id === 'dbHost') {
          const ipPortMatch = value.match(/^(.+?):(\d{2,5})$/);
          if (ipPortMatch) {
            fetch('/api/update-db-ip-port', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                ip: ipPortMatch[1],
                port: parseInt(ipPortMatch[2], 10)
              })
            });
            // Debounce kiểm tra kết nối
            clearTimeout(window._mongoDebounce);
            window._mongoDebounce = setTimeout(() => checkMongoConnectionRetry(0), 800);
            return;
          } else if (value) {
            // Nếu chỉ nhập IP, tự động set port về mặc định 27017
            fetch('/api/update-db-ip-port', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                ip: value,
                port: 27017
              })
            });
            clearTimeout(window._mongoDebounce);
            window._mongoDebounce = setTimeout(() => checkMongoConnectionRetry(0), 800);
            return;
          }
        }
        updateConfig(key, value);

        // Xử lý logic đặc biệt cho Tên database
        if (id === 'dbName') {
          updateConfig('mongodb.auth.authSource', value);
          clearTimeout(window._mongoDebounce);
          window._mongoDebounce = setTimeout(() => checkMongoConnectionRetry(0), 800);
        }

        if (id === 'useAuth') {
          toggleAuthFields();
        }

        // Khi nhập username/password thì chỉ kiểm tra xác thực
        if (id === 'dbUsername' || id === 'dbPassword') {
          clearTimeout(window._mongoDebounce);
          window._mongoDebounce = setTimeout(() => checkMongoAuthRetry(0), 800);
        }
      });
    });
  });

  // Hiển thị thông báo kết nối
  const dbCheckResult = document.createElement('div');
  dbCheckResult.id = 'dbCheckResult';
  dbCheckResult.style.marginTop = '8px';
  document.querySelector('.form-content').appendChild(dbCheckResult);

  // Hàm retry kiểm tra kết nối MongoDB (dùng cho dbHost/dbName)
  async function checkMongoConnectionRetry(retry = 0) {
    const ipValue = document.getElementById('dbHost').value.trim();
    const dbNameValue = document.getElementById('dbName').value.trim();
    let ip = ipValue;
    let port = 27017;
    const ipPortMatch = ipValue.match(/^(.+?):(\d{2,5})$/);
    if (ipPortMatch) {
      ip = ipPortMatch[1];
      port = parseInt(ipPortMatch[2], 10);
    }
    dbCheckResult.textContent = 'Đang kiểm tra kết nối...';
    dbCheckResult.style.color = '#888';
    try {
      const res = await fetch('/api/check-mongo', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          ip,
          port,
          dbName: dbNameValue
        })
      });
      const text = await res.text();
      console.log('[DEBUG] Response text:', text);
      let data;
      try {
        data = JSON.parse(text);
      } catch (e) {
        console.error('[DEBUG] Lỗi parse JSON:', text);
        throw e;
      }
      console.log('[DEBUG] Parsed data:', data);
      // Luôn bật switch nếu needAuth true, kể cả khi success false
      if (data.needAuth) {
        if (!useAuthCheckbox.checked) {
          useAuthCheckbox.checked = true;
          toggleAuthFields();
          updateConfig('mongodb.auth.enabled', true);
        } else {
          toggleAuthFields();
        }
        dbCheckResult.textContent += ' Database yêu cầu xác thực, đã tự động bật xác thực.';
      }
      if (data.success) {
        dbCheckResult.textContent = 'Kết nối thành công!' + (data.needAuth ? ' Database yêu cầu xác thực, đã tự động bật xác thực.' : '');
        dbCheckResult.style.color = 'green';
      } else {
        dbCheckResult.textContent = '❌ ' + (data.message || 'Kết nối thất bại!') + (data.needAuth ? ' Database yêu cầu xác thực, đã tự động bật xác thực.' : '');
        dbCheckResult.style.color = 'red';
        if (retry < 2) {
          dbCheckResult.textContent += `\nTự động thử lại lần ${retry + 2} sau 5 giây...`;
          setTimeout(() => checkMongoConnectionRetry(retry + 1), 5000);
        }
      }
    } catch (err) {
      console.error('[DEBUG] Lỗi catch:', err);
      dbCheckResult.textContent = 'Lỗi kiểm tra kết nối!';
      dbCheckResult.style.color = 'red';
      if (retry < 2) {
        dbCheckResult.textContent += `\nTự động thử lại lần ${retry + 2} sau 5 giây...`;
        setTimeout(() => checkMongoConnectionRetry(retry + 1), 5000);
      }
    }
  }

  // Hàm retry kiểm tra xác thực MongoDB (dùng cho dbUsername/dbPassword)
  async function checkMongoAuthRetry(retry = 0) {
    const ipValue = document.getElementById('dbHost').value.trim();
    const dbNameValue = document.getElementById('dbName').value.trim();
    const username = dbUsernameInput.value.trim();
    const password = dbPasswordInput.value.trim();
    let ip = ipValue;
    let port = 27017;
    const ipPortMatch = ipValue.match(/^(.+?):(\d{2,5})$/);
    if (ipPortMatch) {
      ip = ipPortMatch[1];
      port = parseInt(ipPortMatch[2], 10);
    }
    dbCheckResult.textContent = 'Đang kiểm tra xác thực...';
    dbCheckResult.style.color = '#888';
    try {
      const res = await fetch('/api/check-mongo', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          ip,
          port,
          dbName: dbNameValue,
          username,
          password
        })
      });
      const data = await res.json();
      if (data.success) {
        dbCheckResult.textContent = 'Xác thực thành công!';
        dbCheckResult.style.color = 'green';
      } else {
        dbCheckResult.textContent = '❌ ' + (data.message || 'Xác thực thất bại!');
        dbCheckResult.style.color = 'red';
        if (retry < 2) {
          dbCheckResult.textContent += `\nTự động thử lại lần ${retry + 2} sau 5 giây...`;
          setTimeout(() => checkMongoAuthRetry(retry + 1), 5000);
        }
      }
    } catch (err) {
      dbCheckResult.textContent = 'Lỗi kiểm tra xác thực!';
      dbCheckResult.style.color = 'red';
      if (retry < 2) {
        dbCheckResult.textContent += `\nTự động thử lại lần ${retry + 2} sau 5 giây...`;
        setTimeout(() => checkMongoAuthRetry(retry + 1), 5000);
      }
    }
  }
</script>