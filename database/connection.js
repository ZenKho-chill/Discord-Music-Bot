const mongoose = require('mongoose');
const logger = require('../utils/logger');

class DatabaseConnection {
    constructor() {
        this.isConnected = false;
        this.isAvailable = true; // C·ªù hi·ªáu ƒë·ªÉ bi·∫øt MongoDB c√≥ s·∫µn kh√¥ng
        this.config = null;
    }

    async connect() {
        try {
            if (this.isConnected) {
                logger.database('üìä C∆° s·ªü d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi');
                return;
            }

            // T·∫£i c·∫•u h√¨nh
            this.config = require('../config/config').mongodb;
            
            // X√¢y d·ª±ng MongoDB URI t·ª´ c√°c th√†nh ph·∫ßn c·∫•u h√¨nh
            let mongoURI;
            if (this.config.auth.enabled && this.config.auth.username && this.config.auth.password) {
                // URI v·ªõi x√°c th·ª±c
                const authString = `${encodeURIComponent(this.config.auth.username)}:${encodeURIComponent(this.config.auth.password)}`;
                mongoURI = `mongodb://${authString}@${this.config.ip}:${this.config.port}/${this.config.database}`;
                logger.connection('üîê ƒê√£ b·∫≠t x√°c th·ª±c MongoDB');
            } else {
                // URI kh√¥ng c√≥ x√°c th·ª±c
                mongoURI = `mongodb://${this.config.ip}:${this.config.port}/${this.config.database}`;
            }
            
            // S·ª≠ d·ª•ng c·∫•u h√¨nh k·∫øt n·ªëi t·ª´ config
            let connectOptions = { 
                ...this.config.connection,
                authSource: this.config.auth.authSource 
            };

            logger.connection('üîå ƒêang k·∫øt n·ªëi t·ªõi MongoDB...');
            logger.connection('üîó URI:', mongoURI.replace(/\/\/.*@/, '//***:***@')); // ·∫®n th√¥ng tin x√°c th·ª±c trong log
            
            await mongoose.connect(mongoURI, connectOptions);

            this.isConnected = true;
            this.isAvailable = true;
            logger.core('üçÉ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
            logger.database('üîó C∆° s·ªü d·ªØ li·ªáu:', mongoose.connection.name);
            logger.database('üè† M√°y ch·ªß:', mongoose.connection.host + ':' + mongoose.connection.port);
            
            // Th·ª±c hi·ªán ki·ªÉm tra s·ª©c kh·ªèe
            await this.performHealthChecks();
            
            // Ki·ªÉm tra v√† kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
            await this.checkAndInitializeDatabase();
            
            // X·ª≠ l√Ω c√°c s·ª± ki·ªán k·∫øt n·ªëi
            mongoose.connection.on('error', (err) => {
                console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err);
                this.isConnected = false;
            });

            mongoose.connection.on('disconnected', () => {
                logger.connection('üìä ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
                this.isConnected = false;
            });

            mongoose.connection.on('reconnected', () => {
                logger.connection('üîÑ ƒê√£ k·∫øt n·ªëi l·∫°i MongoDB');
                this.isConnected = true;
            });

        } catch (error) {
            console.error('‚ùå K·∫øt n·ªëi MongoDB th·∫•t b·∫°i:', error.message);
            console.log('‚ö†Ô∏è Ch·∫°y m√† kh√¥ng c√≥ c∆° s·ªü d·ªØ li·ªáu - phi√™n l√†m vi·ªác ch·ªâ l∆∞u trong b·ªô nh·ªõ');
            console.log('üí° ƒê·ªÉ b·∫≠t t√≠nh nƒÉng c∆° s·ªü d·ªØ li·ªáu, vui l√≤ng c√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông MongoDB');
            
            this.isConnected = false;
            this.isAvailable = false;
            
            // Kh√¥ng throw error ƒë·ªÉ app v·∫´n ch·∫°y ƒë∆∞·ª£c
            return false;
        }
    }

    /**
     * Ki·ªÉm tra v√† kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu n·∫øu y√™u c·∫ßu x√°c th·ª±c
     * X·ª≠ l√Ω d·ªçn d·∫πp ngu·ªìn x√°c th·ª±c v√† thi·∫øt l·∫≠p c∆° s·ªü d·ªØ li·ªáu
     */
    async checkAndInitializeDatabase() {
        try {
            logger.database('\nüîç ƒêang ki·ªÉm tra kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu...');
            
            if (!this.config.auth.enabled) {
                logger.database('‚úÖ Kh√¥ng y√™u c·∫ßu x√°c th·ª±c, b·ªè qua kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu');
                return;
            }
            
            // Tr√≠ch xu·∫•t t√™n c∆° s·ªü d·ªØ li·ªáu t·ª´ c·∫•u h√¨nh ho·∫∑c URI
            const dbName = this.config.database || this.extractDatabaseFromURI(mongoURI);
            const authSource = this.config.auth.authSource;
            
            logger.database(`üîê ƒê√£ b·∫≠t x√°c th·ª±c cho c∆° s·ªü d·ªØ li·ªáu: ${dbName}`);
            logger.database(`üîê Ngu·ªìn x√°c th·ª±c: ${authSource}`);
            
            // Ki·ªÉm tra xem ch√∫ng ta c√≥ ƒëang s·ª≠ d·ª•ng ngu·ªìn x√°c th·ª±c kh√°c kh√¥ng
            if (authSource && authSource !== dbName) {
                logger.database(`‚ö†Ô∏è ƒêang s·ª≠ d·ª•ng ngu·ªìn x√°c th·ª±c b√™n ngo√†i: ${authSource}`);
                logger.database('üí° ƒêi·ªÅu n√†y cho th·∫•y MongoDB ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th·ªß c√¥ng v·ªõi x√°c th·ª±c');
                
                // Ki·ªÉm tra c√°c b·ªô s∆∞u t·∫≠p b·∫Øt bu·ªôc trong ngu·ªìn x√°c th·ª±c c√≥ th·ªÉ c·∫ßn d·ªçn d·∫πp
                await this.checkAuthSourceCleanup();
            }
            
            // ƒê·∫£m b·∫£o c∆° s·ªü d·ªØ li·ªáu ƒë√≠ch t·ªìn t·∫°i v√† c√≥ c·∫•u tr√∫c y√™u c·∫ßu
            await this.initializeAppDatabase();
            
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu:', error.message);
            // Kh√¥ng l√†m th·∫•t b·∫°i k·∫øt n·ªëi, ch·ªâ c·∫£nh b√°o
            console.warn('‚ö†Ô∏è Ti·∫øp t·ª•c v·ªõi ch·ª©c nƒÉng c∆° s·ªü d·ªØ li·ªáu c∆° b·∫£n...');
        }
    }
    
    /**
     * Tr√≠ch xu·∫•t t√™n c∆° s·ªü d·ªØ li·ªáu t·ª´ MongoDB URI ho·∫∑c s·ª≠ d·ª•ng t·ª´ c·∫•u h√¨nh
     */
    extractDatabaseFromURI(uri) {
        try {
            // N·∫øu c√≥ c·∫•u h√¨nh database r√µ r√†ng, s·ª≠ d·ª•ng n√≥
            if (this.config && this.config.database) {
                return this.config.database;
            }
            
            // N·∫øu kh√¥ng, c·ªë g·∫Øng tr√≠ch xu·∫•t t·ª´ URI
            const match = uri.match(/\/([^/?]+)(\?|$)/);
            return match ? match[1] : 'discord-music-bot';
        } catch (error) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t t√™n c∆° s·ªü d·ªØ li·ªáu t·ª´ URI, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh');
            return 'discord-music-bot';
        }
    }
    
    /**
     * Ki·ªÉm tra ngu·ªìn x√°c th·ª±c cho c√°c b·ªô s∆∞u t·∫≠p b·∫Øt bu·ªôc c·∫ßn ƒë∆∞·ª£c d·ªçn d·∫πp
     */
    async checkAuthSourceCleanup() {
        try {
            // Ki·ªÉm tra xem vi·ªác d·ªçn d·∫πp c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
            if (!this.config.initialization || !this.config.initialization.cleanupAuthSource) {
                logger.database('üîß D·ªçn d·∫πp ngu·ªìn x√°c th·ª±c ƒë√£ b·ªã t·∫Øt trong c·∫•u h√¨nh');
                return;
            }
            
            const authSource = this.config.auth.authSource;
            const currentDb = mongoose.connection.name;
            
            // Ch·ªâ ti·∫øp t·ª•c n·∫øu ngu·ªìn x√°c th·ª±c kh√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu hi·ªán t·∫°i
            if (authSource === currentDb) {
                return;
            }
            
            logger.database(`üßπ ƒêang ki·ªÉm tra ngu·ªìn x√°c th·ª±c '${authSource}' ƒë·ªÉ d·ªçn d·∫πp...`);
            
            // K·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu ngu·ªìn x√°c th·ª±c ƒë·ªÉ ki·ªÉm tra c√°c b·ªô s∆∞u t·∫≠p b·∫Øt bu·ªôc
            const authDb = mongoose.connection.client.db(authSource);
            const collections = await authDb.listCollections().toArray();
            
            // L·∫•y c√°c m·∫´u d·ªçn d·∫πp t·ª´ c·∫•u h√¨nh
            const cleanupPatterns = this.config.initialization.cleanupPatterns || [
                'temp_',
                'setup_', 
                'initial_',
                'auth_temp',
                'bootstrap_'
            ];
            
            const collectionsToCleanup = collections.filter(col => 
                cleanupPatterns.some(pattern => 
                    col.name.includes(pattern)
                ) && !col.name.startsWith('system.')  // Kh√¥ng ch·∫°m v√†o c√°c b·ªô s∆∞u t·∫≠p h·ªá th·ªëng
            );
            
            if (collectionsToCleanup.length > 0) {
                logger.database(`üóëÔ∏è T√¨m th·∫•y ${collectionsToCleanup.length} b·ªô s∆∞u t·∫≠p c·∫ßn d·ªçn d·∫πp trong ngu·ªìn x√°c th·ª±c:`);
                
                for (const collection of collectionsToCleanup) {
                    try {
                        logger.database(`   - ƒêang x√≥a b·ªô s∆∞u t·∫≠p t·∫°m th·ªùi: ${collection.name}`);
                        await authDb.collection(collection.name).drop();
                        logger.database(`   ‚úÖ ƒê√£ d·ªçn d·∫πp: ${collection.name}`);
                    } catch (dropError) {
                        // B·ªô s∆∞u t·∫≠p c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ quy·ªÅn, ti·∫øp t·ª•c
                        logger.database(`   ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a ${collection.name}: ${dropError.message}`);
                    }
                }
            } else {
                logger.database('‚úÖ Kh√¥ng t√¨m th·∫•y b·ªô s∆∞u t·∫≠p t·∫°m th·ªùi n√†o trong ngu·ªìn x√°c th·ª±c');
            }
            
        } catch (error) {
            logger.warn('‚ö†Ô∏è Ki·ªÉm tra d·ªçn d·∫πp ngu·ªìn x√°c th·ª±c th·∫•t b·∫°i:', error.message);
            logger.database('üí° ƒêi·ªÅu n√†y b√¨nh th∆∞·ªùng n·∫øu ngu·ªìn x√°c th·ª±c ƒë∆∞·ª£c qu·∫£n l√Ω b√™n ngo√†i');
        }
    }
    
    /**
     * Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu ·ª©ng d·ª•ng v·ªõi c√°c b·ªô s∆∞u t·∫≠p v√† ch·ªâ m·ª•c c·∫ßn thi·∫øt
     */
    async initializeAppDatabase() {
        try {
            logger.database('\nüèóÔ∏è ƒêang kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu ·ª©ng d·ª•ng...');
            
            // Ki·ªÉm tra xem vi·ªác kh·ªüi t·∫°o c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
            if (!this.config.initialization || !this.config.initialization.enabled) {
                logger.database('üîß Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu ƒë√£ b·ªã t·∫Øt trong c·∫•u h√¨nh');
                return;
            }
            
            const db = mongoose.connection.db;
            
            // T·∫°o c√°c b·ªô s∆∞u t·∫≠p c·∫ßn thi·∫øt n·∫øu ƒë∆∞·ª£c b·∫≠t
            if (this.config.initialization.createRequiredCollections) {
                const existingCollections = await db.listCollections().toArray();
                const existingNames = existingCollections.map(col => col.name);
                
                // C√°c b·ªô s∆∞u t·∫≠p c·∫ßn thi·∫øt cho bot nh·∫°c
                const requiredCollections = [
                    'musictracks',
                    'userstats', 
                    'commandstats',
                    'usersessions'
                ];
                
                logger.database('üìã ƒêang ki·ªÉm tra c√°c b·ªô s∆∞u t·∫≠p c·∫ßn thi·∫øt...');
                for (const collectionName of requiredCollections) {
                    if (!existingNames.includes(collectionName)) {
                        logger.database(`   üìÅ ƒêang t·∫°o b·ªô s∆∞u t·∫≠p: ${collectionName}`);
                        await db.createCollection(collectionName);
                        logger.database(`   ‚úÖ ƒê√£ t·∫°o: ${collectionName}`);
                    } else {
                        logger.database(`   ‚úÖ ƒê√£ t·ªìn t·∫°i: ${collectionName}`);
                    }
                }
            }
            
            // T·∫°o ch·ªâ m·ª•c n·∫øu ƒë∆∞·ª£c b·∫≠t
            if (this.config.initialization.createIndexes) {
                await this.createRequiredIndexes();
            }
            
            logger.database('‚úÖ Ho√†n th√†nh kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu');
            
        } catch (error) {
            console.error('‚ùå Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu th·∫•t b·∫°i:', error.message);
            throw error;
        }
    }
    
    /**
     * T·∫°o c√°c ch·ªâ m·ª•c c·∫ßn thi·∫øt ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
     */
    async createRequiredIndexes() {
        try {
            logger.database('üîç ƒêang t·∫°o ch·ªâ m·ª•c c∆° s·ªü d·ªØ li·ªáu...');
            
            const db = mongoose.connection.db;
            
            // Ch·ªâ m·ª•c MusicTracks
            const musicTracks = db.collection('musictracks');
            await musicTracks.createIndex({ "url": 1 });
            await musicTracks.createIndex({ "guildId": 1, "timestamp": -1 });
            await musicTracks.createIndex({ "platform.platform": 1 });
            
            // Ch·ªâ m·ª•c UserStats  
            const userStats = db.collection('userstats');
            await userStats.createIndex({ "userId": 1, "guildId": 1 }, { unique: true });
            await userStats.createIndex({ "lastActivity": -1 });
            
            // Ch·ªâ m·ª•c CommandStats
            const commandStats = db.collection('commandstats');
            await commandStats.createIndex({ "userId": 1, "guildId": 1, "commandName": 1 }, { unique: true });
            await commandStats.createIndex({ "lastUsed": -1 });
            
            // Ch·ªâ m·ª•c UserSessions
            const userSessions = db.collection('usersessions');
            await userSessions.createIndex({ "userId": 1, "guildId": 1 });
            await userSessions.createIndex({ "createdAt": 1 }, { expireAfterSeconds: 7 * 24 * 60 * 60 }); // TTL 7 ng√†y
            
            logger.database('‚úÖ T·∫°o ch·ªâ m·ª•c c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng');
            
        } catch (error) {
            logger.warn('‚ö†Ô∏è C·∫£nh b√°o t·∫°o ch·ªâ m·ª•c:', error.message);
            logger.database('üí° M·ªôt s·ªë ch·ªâ m·ª•c c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i, ti·∫øp t·ª•c...');
        }
    }

    async disconnect() {
        try {
            await mongoose.disconnect();
            this.isConnected = false;
            logger.connection('üìä ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
        } catch (error) {
            console.error('‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi MongoDB:', error);
        }
    }

    getStatus() {
        return {
            isConnected: this.isConnected,
            isAvailable: this.isAvailable,
            readyState: mongoose.connection.readyState,
            host: mongoose.connection.host,
            port: mongoose.connection.port,
            name: mongoose.connection.name
        };
    }

    // Helper method ƒë·ªÉ check n·∫øu c√≥ th·ªÉ d√πng database
    canUseDatabase() {
        return this.isAvailable && this.isConnected;
    }

    // Th·ª±c hi·ªán ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªÉ x√°c minh c√°c ho·∫°t ƒë·ªông c∆° s·ªü d·ªØ li·ªáu
    async performHealthChecks() {
        if (!this.config?.healthCheck?.enabled) {
            logger.database('üîç Ki·ªÉm tra s·ª©c kh·ªèe c∆° s·ªü d·ªØ li·ªáu ƒë√£ b·ªã t·∫Øt');
            return true;
        }

        try {
            logger.database('üîç ƒêang th·ª±c hi·ªán ki·ªÉm tra s·ª©c kh·ªèe c∆° s·ªü d·ªØ li·ªáu...');
            
            // Ki·ªÉm tra k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
            const adminDb = mongoose.connection.db.admin();
            const pingResult = await adminDb.ping();
            logger.database('‚úÖ Ping c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng:', pingResult);

            // Ki·ªÉm tra c√°c ho·∫°t ƒë·ªông ƒë·ªçc/ghi
            const testCollectionName = this.config.healthCheck.testCollection;
            const testCollection = mongoose.connection.db.collection(testCollectionName);
            
            // Ki·ªÉm tra ho·∫°t ƒë·ªông ghi
            const testDoc = {
                ...this.config.healthCheck.testDocument,
                timestamp: new Date()
            };
            
            logger.database('üîç ƒêang ki·ªÉm tra ho·∫°t ƒë·ªông ghi...');
            const writeResult = await testCollection.insertOne(testDoc);
            logger.database('‚úÖ Ki·ªÉm tra ghi th√†nh c√¥ng:', writeResult.insertedId);

            // Ki·ªÉm tra ho·∫°t ƒë·ªông ƒë·ªçc
            logger.database('üîç ƒêang ki·ªÉm tra ho·∫°t ƒë·ªông ƒë·ªçc...');
            const readResult = await testCollection.findOne({ _id: writeResult.insertedId });
            logger.database('‚úÖ Ki·ªÉm tra ƒë·ªçc th√†nh c√¥ng:', !!readResult);

            // Ki·ªÉm tra ho·∫°t ƒë·ªông c·∫≠p nh·∫≠t
            logger.database('üîç ƒêang ki·ªÉm tra ho·∫°t ƒë·ªông c·∫≠p nh·∫≠t...');
            const updateResult = await testCollection.updateOne(
                { _id: writeResult.insertedId },
                { $set: { updated: true, updatedAt: new Date() } }
            );
            logger.database('‚úÖ Ki·ªÉm tra c·∫≠p nh·∫≠t th√†nh c√¥ng:', updateResult.modifiedCount);

            // Ki·ªÉm tra ho·∫°t ƒë·ªông x√≥a
            logger.database('üîç ƒêang ki·ªÉm tra ho·∫°t ƒë·ªông x√≥a...');
            const deleteResult = await testCollection.deleteOne({ _id: writeResult.insertedId });
            logger.database('‚úÖ Ki·ªÉm tra x√≥a th√†nh c√¥ng:', deleteResult.deletedCount);

            // Ki·ªÉm tra quy·ªÅn ng∆∞·ªùi d√πng
            await this.testUserPermissions();

            logger.database('‚úÖ T·∫•t c·∫£ ki·ªÉm tra s·ª©c kh·ªèe c∆° s·ªü d·ªØ li·ªáu ƒë√£ th√†nh c√¥ng!');
            return true;

        } catch (error) {
            console.error('‚ùå Ki·ªÉm tra s·ª©c kh·ªèe c∆° s·ªü d·ªØ li·ªáu th·∫•t b·∫°i:', error.message);
            console.error('‚ùå L·ªói ƒë·∫ßy ƒë·ªß:', error);
            
            // X√°c ƒë·ªãnh xem c√≥ ph·∫£i l·ªói x√°c th·ª±c kh√¥ng
            if (error.code === 13 || error.message.includes('authentication') || error.message.includes('unauthorized')) {
                console.error('üîê Ph√°t hi·ªán l·ªói x√°c th·ª±c. H√£y xem x√©t:');
                console.error('   1. B·∫≠t x√°c th·ª±c trong config.mongodb.auth');
                console.error('   2. Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng MONGO_USERNAME v√† MONGO_PASSWORD');
                console.error('   3. Ki·ªÉm tra xem MongoDB c√≥ y√™u c·∫ßu x√°c th·ª±c kh√¥ng');
            }
            
            return false;
        }
    }

    // Ki·ªÉm tra quy·ªÅn ng∆∞·ªùi d√πng
    async testUserPermissions() {
        try {
            logger.database('üîç ƒêang ki·ªÉm tra quy·ªÅn ng∆∞·ªùi d√πng...');
            
            // Ki·ªÉm tra li·ªát k√™ c√°c b·ªô s∆∞u t·∫≠p
            const collections = await mongoose.connection.db.listCollections().toArray();
            logger.database('‚úÖ C√≥ th·ªÉ li·ªát k√™ b·ªô s∆∞u t·∫≠p:', collections.length, 'b·ªô s∆∞u t·∫≠p ƒë∆∞·ª£c t√¨m th·∫•y');

            // Ki·ªÉm tra t·∫°o b·ªô s∆∞u t·∫≠p n·∫øu c·∫ßn
            const testCollectionName = 'permission_test_' + Date.now();
            const testCollection = mongoose.connection.db.collection(testCollectionName);
            
            await testCollection.insertOne({ test: true });
            await testCollection.drop();
            logger.database('‚úÖ C√≥ th·ªÉ t·∫°o/x√≥a b·ªô s∆∞u t·∫≠p');

        } catch (error) {
            logger.warn('‚ö†Ô∏è Ph√°t hi·ªán quy·ªÅn h·∫°n ch·∫ø:', error.message);
            
            if (error.code === 13) {
                logger.warn('   - Ng∆∞·ªùi d√πng c√≥ th·ªÉ kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã ƒë·∫ßy ƒë·ªß');
                logger.warn('   - ƒê·ªçc/ghi c∆° b·∫£n v·∫´n s·∫Ω ho·∫°t ƒë·ªông');
            }
        }
    }
}

module.exports = new DatabaseConnection();
