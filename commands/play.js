/*
 * T·ªáp n√†y l√† m·ªôt ph·∫ßn c·ªßa Discord Music Bot.
 *
 * Discord Music Bot l√† ph·∫ßn m·ªÅm mi·ªÖn ph√≠: b·∫°n c√≥ th·ªÉ ph√¢n ph·ªëi l·∫°i ho·∫∑c s·ª≠a ƒë·ªïi
 * theo c√°c ƒëi·ªÅu kho·∫£n c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë∆∞·ª£c c√¥ng b·ªë b·ªüi
 * T·ªï ch·ª©c Ph·∫ßn m·ªÅm T·ª± do, phi√™n b·∫£n 3 ho·∫∑c (n·∫øu b·∫°n mu·ªën) b·∫•t k·ª≥ phi√™n b·∫£n n√†o sau ƒë√≥.
 *
 * Discord Music Bot ƒë∆∞·ª£c ph√¢n ph·ªëi v·ªõi hy v·ªçng r·∫±ng n√≥ s·∫Ω h·ªØu √≠ch,
 * nh∆∞ng KH√îNG C√ì B·∫¢O H√ÄNH; th·∫≠m ch√≠ kh√¥ng bao g·ªìm c·∫£ b·∫£o ƒë·∫£m
 * V·ªÄ T√çNH TH∆Ø∆†NG M·∫†I ho·∫∑c PH√ô H·ª¢P CHO M·ªòT M·ª§C ƒê√çCH C·ª§ TH·ªÇ. Xem
 * Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
 *
 * B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt b·∫£n sao c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU c√πng v·ªõi Discord Music Bot.
 * N·∫øu kh√¥ng, h√£y xem <https://www.gnu.org/licenses/>.
 */

const { ApplicationCommandOptionType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const db = require("../mongoDB");

let selectedThumbnailURL;

module.exports = {
  name: "play",
  description: "C√πng nghe m·ªôt ch√∫t nh·∫°c n√†o!!",
  permissions: "0x0000000000000800",
  options: [{
    name: 'name',
    description: 'Nh·∫≠p t√™n b√†i h√°t b·∫°n mu·ªën ph√°t.',
    type: ApplicationCommandOptionType.String,
    required: true
  }],
  voiceChannel: true,
  run: async (client, interaction) => {
    try {
      const name = interaction.options.getString('name');
      console.log(`üéµ Ng∆∞·ªùi d√πng y√™u c·∫ßu b√†i h√°t: ${name}`);

      if (!name) return interaction.reply({ content: `‚ùå Vui l√≤ng nh·∫≠p t√™n b√†i h√°t h·ª£p l·ªá.`, ephemeral: true }).catch(e => { });

      let res;
      try {
        res = await client.player.search(name, {
          member: interaction.member,
          textChannel: interaction.channel,
          interaction
        });
        console.log(`üîé S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t√¨m ki·∫øm: ${res.length}`);
      } catch (e) {
        console.error(`‚ùå L·ªói t√¨m ki·∫øm:`, e);
        return interaction.editReply({ content: `‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£` }).catch(e => { });
      }

      if (!res || !res.length || res.length <= 0) {
        console.log("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ h·ª£p l·ªá.");
        return interaction.reply({ content: `‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£`, ephemeral: true }).catch(e => { });
      }

      const embed = new EmbedBuilder();
      embed.setColor(client.config.embedColor);
      embed.setTitle(`T√¨m th·∫•y: ${name}`);

      const maxTracks = res.slice(0, 10);
      console.log(`üé∂ S·ªë b√†i h√°t t·ªëi ƒëa: ${maxTracks.length}`);

      let track_button_creator = maxTracks.map((song, index) => {
        console.log(`üéµ [${index + 1}] ${song.name} - ${song.url}`);
        return new ButtonBuilder()
          .setLabel(`${index + 1}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId(`${index + 1}`);
      });

      let buttons1;
      let buttons2;
      if (track_button_creator.length > 10) {
        buttons1 = new ActionRowBuilder().addComponents(track_button_creator.slice(0, 5));
        buttons2 = new ActionRowBuilder().addComponents(track_button_creator.slice(5, 10));
      } else {
        if (track_button_creator.length > 5) {
          buttons1 = new ActionRowBuilder().addComponents(track_button_creator.slice(0, 5));
          buttons2 = new ActionRowBuilder().addComponents(track_button_creator.slice(5, track_button_creator.length));
        } else {
          buttons1 = new ActionRowBuilder().addComponents(track_button_creator);
        }
      }

      let cancel = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setLabel("H·ªßy")
          .setStyle(ButtonStyle.Danger)
          .setCustomId('cancel')
      );

      embed.setDescription(`${maxTracks.map((song, i) => `**${i + 1}**. [${song.name}](${song.url}) | \`${song.uploader.name}\``).join('\n')}\n\n‚ú®Ch·ªçn m·ªôt b√†i h√°t t·ª´ d∆∞·ªõi ƒë√¢y!!`);

      let code;
      if (buttons1 && buttons2) {
        code = { embeds: [embed], components: [buttons1, buttons2, cancel] };
      } else {
        code = { embeds: [embed], components: [buttons1, cancel] };
      }

      interaction.reply(code).then(async Message => {
        const filter = i => i.user.id === interaction.user.id;
        let collector = await Message.createMessageComponentCollector({ filter, time: 60000 });

        collector.on('collect', async (button) => {
          console.log(`üîò N√∫t ƒë∆∞·ª£c nh·∫•n: ${button.customId}`);

          switch (button.customId) {
            case 'cancel': {
              embed.setDescription(`T√¨m ki·∫øm b·ªã h·ªßy`);
              await interaction.editReply({ embeds: [embed], components: [] }).catch(e => { });
              return collector.stop();
            }
            break;

            default: {
              const selectedIndex = Number(button.customId) - 1;
              console.log(`‚û°Ô∏è Ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn: ${selectedIndex}`);
              console.log(`üé∂ T·ªïng s·ªë k·∫øt qu·∫£: ${res.length}`);

              if (selectedIndex < 0 || selectedIndex >= res.length) {
                console.log(`‚ùå Ch·ªâ s·ªë ch·ªçn kh√¥ng h·ª£p l·ªá.`);
                await interaction.editReply({ content: `‚ùå Ch·ªçn kh√¥ng h·ª£p l·ªá!`, ephemeral: true }).catch(e => { });
                return collector.stop();
              }

              selectedThumbnailURL = maxTracks[selectedIndex].thumbnail;
              embed.setThumbnail(selectedThumbnailURL);
              embed.setDescription(`**${res[selectedIndex].name}**`);
              await interaction.editReply({ embeds: [embed], components: [] }).catch(e => { });

              try {
                console.log(`üöÄ ƒêang c·ªë g·∫Øng ph√°t: ${res[selectedIndex].url}`);
                await client.player.play(interaction.member.voice.channel, res[selectedIndex].url, {
                  member: interaction.member,
                  textChannel: interaction.channel,
                  interaction
                });
                console.log(`‚úÖ L·ªánh ph√°t ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.`);
              } catch (e) {
                console.error(`‚ùå L·ªói khi ph√°t:`, e);
                await interaction.editReply({ content: `‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£!`, ephemeral: true }).catch(e => { });
              }
              return collector.stop();
            }
          }
        });

        collector.on('end', (msg, reason) => {
          console.log(`‚èπÔ∏è B·ªô thu th·∫≠p k·∫øt th√∫c. L√Ω do: ${reason}`);
          if (reason === 'time') {
            embed.setDescription('T√¨m ki·∫øm ƒë√£ h·∫øt th·ªùi gian.');
            return interaction.editReply({ embeds: [embed], components: [] }).catch(e => { });
          }
        });
      }).catch(e => {
        console.error(`‚ùå L·ªói khi tr·∫£ l·ªùi l·ªánh:`, e);
      });
    } catch (e) {
      console.error(`‚ùå L·ªói khi th·ª±c thi l·ªánh:`, e);
    }
  },
};

module.exports.selectedThumbnailURL = selectedThumbnailURL;
