const { SlashCommandBuilder } = require('discord.js');
const ytSearch = require('yt-search');
const { ActionRowBuilder, StringSelectMenuBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { createCanvas, loadImage } = require('canvas');
const { AttachmentBuilder } = require('discord.js');
const StackBlur = require('stackblur-canvas');
const https = require('https');
const ytpl = require('@distube/ytpl');
const puppeteer = require('puppeteer');
const { routeToPlatform } = require('./platforms/platformDetector');
const PlaylistAddController = require('../services/PlaylistAddController');
const config = require('../config/config');
const autoLeaveManager = require('../utils/autoLeaveManager');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('phatnhac')
    .setDescription('Ph√°t nh·∫°c t·ª´ Youtube/Spotify/SoundCloud')
    .addStringOption(opt =>
      opt.setName('name-link')
        .setDescription('Link ho·∫∑c t·ª´ kh√≥a')
        .setRequired(true)
        .setAutocomplete(true)
    ),

  async autocomplete(interaction) {
    try {
      const focused = interaction.options.getFocused();
      const suggestions = [];

      if (focused.startsWith('http://') || focused.startsWith('https://')) {
        suggestions.push({ name: focused, value: focused });
      } else if (focused.trim() !== '') {
        const ytSearch = require('yt-search');
        try {
          const res = await ytSearch(focused);
          for (const v of res.videos.slice(0, 5)) {
            const name = v.title.length > 100 ? v.title.substring(0, 97) + '...' : v.title;
            suggestions.push({ name: name, value: v.url });
          }
        } catch (e) {
          console.error('[Autocomplete] L·ªói khi t√¨m ki·∫øm YouTube:', e);
        }
      }
      
      if (!interaction.responded) {
        await interaction.respond(suggestions.slice(0, 25));
      }
    } catch (error) {
      if (error.code === 10062) { 
        return;
      }
      console.error('[Autocomplete] L·ªói kh√¥ng x√°c ƒë·ªãnh:', error);
    }
  },

  async execute(client, interaction) {
    try {
      // Ki·ªÉm tra xem m√°y ch·ªß c√≥ b·ªã ch·∫∑n kh√¥ng cho bot tham gia
      if (autoLeaveManager.isGuildBlocked(interaction.guildId)) {
        return interaction.reply({
          content: "üö´ Bot ƒë√£ r·ªùi k√™nh tho·∫°i do kh√¥ng c√≥ ai. H√£y v√†o k√™nh tho·∫°i r·ªìi th·ª≠ l·∫°i!",
          ephemeral: true
        });
      }

      let query = interaction.options.getString('name-link');
      const voiceChannel = interaction.member.voice.channel;

      // Chuy·ªÉn ƒë·ªïi li√™n k·∫øt watch?v=...&list=... th√†nh playlist?list=...
      try {
        if (query.includes('youtube.com/watch') && query.includes('list=')) {
          const url = new URL(query);
          const playlistId = url.searchParams.get('list');
          if (playlistId) {
            query = `https://www.youtube.com/playlist?list=${playlistId}`;
            if (config.debug) console.log(`[URL] ƒê√£ chuy·ªÉn ƒë·ªïi li√™n k·∫øt playlist th√†nh: ${query}`);
          }
        }
      } catch (e) {
        // B·ªè qua n·∫øu URL kh√¥ng h·ª£p l·ªá, ƒë·ªÉ logic c≈© x·ª≠ l√Ω
      }

      // ƒê·∫£m b·∫£o lu√¥n kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng lock/info
      if (!client._addLock) client._addLock = {};
      if (!client._addInfo) client._addInfo = {};

      // Ki·ªÉm tra k√™nh tho·∫°i tr∆∞·ªõc khi defer
      if (!voiceChannel) {
        return interaction.reply({
          content: "üîá V√†o k√™nh tho·∫°i tr∆∞·ªõc ƒë√£!",
          ephemeral: true
        });
      }

      // X√≥a c·ªù ch·∫∑n khi ng∆∞·ªùi d√πng tham gia tho·∫°i v√† c·ªë ph√°t nh·∫°c
      if (autoLeaveManager.isGuildBlocked(interaction.guildId)) {
        autoLeaveManager.unblockGuild(interaction.guildId);
      }

      // N·∫øu query l√† li√™n k·∫øt th√¨ ph√°t lu√¥n, n·∫øu kh√¥ng th√¨ t√¨m ki·∫øm v√† g·ª≠i menu ch·ªçn
      if (!query) {
        return interaction.reply({ content: '‚ùå B·∫°n ch∆∞a nh·∫≠p t·ª´ kh√≥a ho·∫∑c li√™n k·∫øt!', ephemeral: true });
      }

      // deferReply duy nh·∫•t t·∫°i ƒë√¢y (public)
      await interaction.deferReply({ ephemeral: true });

      const lockKey = `${interaction.guildId}`;

      // Kh·ªüi t·∫°o controller theo d√µi th√™m playlist (n·∫øu l√† playlist YouTube)
      let playlistAddController = null;
      if ((query.includes('youtube.com/playlist') || query.includes('youtu.be/playlist')) && !/[?&]list=RD[\w-]+/i.test(query)) {
        playlistAddController = new PlaylistAddController(client);
      }

      // Ki·ªÉm tra playlist YouTube c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi ph√°t
      if ((query.includes('youtube.com/playlist') || query.includes('youtu.be/playlist')) && !/[?&]list=RD[\w-]+/i.test(query)) {
        try {
          // S·ª≠ d·ª•ng ytpl ƒë·ªÉ ki·ªÉm tra playlist
          const ytpl = require('@distube/ytpl');
          const playlistIdMatch = query.match(/[?&]list=([\w-]+)/i);
          const playlistId = playlistIdMatch ? playlistIdMatch[1] : null;
          if (!playlistId) {
            return await interaction.followUp({ content: '‚ùå Kh√¥ng t√¨m th·∫•y ID playlist trong link!', ephemeral: true });
          }
          const playlistInfo = await ytpl(playlistId, { limit: 1 });
          if (!playlistInfo || !playlistInfo.items || playlistInfo.items.length === 0) {
            return await interaction.followUp({ content: '‚ùå Playlist n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ b√†i h√°t n√†o!', ephemeral: true });
          }
        } catch (e) {
          return await interaction.followUp({ content: '‚ùå Playlist n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ª´ YouTube!', ephemeral: true });
        }
      }

      if (client._addLock && client._addLock[lockKey]) {
        return await interaction.followUp({ content: 'üö´ ƒêang th√™m playlist/mix v√†o h√†ng ƒë·ª£i, vui l√≤ng ch·ªù!', ephemeral: true });
      }

      // ==== L·∫•y volume ∆∞u ti√™n: user -> server -> distube default ====
      let volumeToPlay = null;
      try {
        const ServerService = require('../database/services/ServerService');
        const serverObj = await ServerService.layServer(interaction.guildId);
        let userVol = null;
        let serverVol = null;
        if (serverObj) {
          if (config.debug) console.log(`[play.js] serverObj.volumePerUser:`, serverObj.volumePerUser);
          // T√¨m volume c√° nh√¢n user
          const userEntry = Array.isArray(serverObj.volumePerUser) ? serverObj.volumePerUser.find(u => {
            if (config.debug) console.log(`[play.js] So s√°nh userId:`, u.userId, '===', interaction.user.id, '->', u.userId === interaction.user.id);
            return u.userId === interaction.user.id;
          }) : null;
          if (userEntry && typeof userEntry.volume === 'number') {
            userVol = userEntry.volume;
            if (config.debug) console.log(`[play.js] T√¨m th·∫•y volume c√° nh√¢n:`, userVol);
          } else {
            if (config.debug) console.log(`[play.js] Kh√¥ng t√¨m th·∫•y volume c√° nh√¢n cho userId:`, interaction.user.id);
          }
          // L·∫•y volumeDefault server
          if (typeof serverObj.volumeDefault === 'number') {
            serverVol = serverObj.volumeDefault;
            if (config.debug) console.log(`[play.js] volumeDefault c·ªßa server:`, serverVol);
          } else {
            if (config.debug) console.log(`[play.js] Kh√¥ng c√≥ volumeDefault cho server`);
          }
        } else {
          if (config.debug) console.log(`[play.js] Kh√¥ng t√¨m th·∫•y serverObj cho guildId:`, interaction.guildId);
        }
        if (typeof userVol === 'number') {
          volumeToPlay = userVol;
          if (config.debug) console.log(`[play.js] S·ª≠ d·ª•ng volume c√° nh√¢n: ${userVol}`);
        } else if (typeof serverVol === 'number') {
          volumeToPlay = serverVol;
          if (config.debug) console.log(`[play.js] S·ª≠ d·ª•ng volume m·∫∑c ƒë·ªãnh server: ${serverVol}`);
        } else {
          if (config.debug) console.log(`[play.js] Kh√¥ng c√≥ volume c√° nh√¢n ho·∫∑c server, d√πng m·∫∑c ƒë·ªãnh distube`);
        }
      } catch (err) {
        console.error('[play.js] L·ªói l·∫•y volume ∆∞u ti√™n:', err);
      }

      // ƒêƒÉng k√Ω event playSong ƒë·ªÉ set volume ƒë√∫ng th·ªùi ƒëi·ªÉm queue ƒë√£ s·∫µn s√†ng
      const playSongHandler = async (queue, song) => {
        try {
          if (queue && queue.id === interaction.guildId) {
            // L·∫•y l·∫°i volumeToPlay m·ªõi nh·∫•t t·ª´ database
            const ServerService = require('../database/services/ServerService');
            let volumeToPlayMoi = null;
            let userVol = null;
            let serverVol = null;
            const serverObj = await ServerService.layServer(interaction.guildId);
            if (serverObj) {
              if (config.debug) console.log(`[play.js] [playSong event] serverObj.volumePerUser:`, serverObj.volumePerUser);
              const userEntry = Array.isArray(serverObj.volumePerUser) ? serverObj.volumePerUser.find(u => u.userId === interaction.user.id) : null;
              if (userEntry && typeof userEntry.volume === 'number') {
                userVol = userEntry.volume;
                if (config.debug) console.log(`[play.js] [playSong event] T√¨m th·∫•y volume c√° nh√¢n:`, userVol);
              }
              if (typeof serverObj.volumeDefault === 'number') {
                serverVol = serverObj.volumeDefault;
                if (config.debug) console.log(`[play.js] [playSong event] volumeDefault c·ªßa server:`, serverVol);
              }
            }
            if (typeof userVol === 'number') {
              volumeToPlayMoi = userVol;
              if (config.debug) console.log(`[play.js] [playSong event] S·ª≠ d·ª•ng volume c√° nh√¢n: ${userVol}`);
            } else if (typeof serverVol === 'number') {
              volumeToPlayMoi = serverVol;
              if (config.debug) console.log(`[play.js] [playSong event] S·ª≠ d·ª•ng volume m·∫∑c ƒë·ªãnh server: ${serverVol}`);
            } else {
              if (config.debug) console.log(`[play.js] [playSong event] Kh√¥ng c√≥ volume c√° nh√¢n ho·∫∑c server, d√πng m·∫∑c ƒë·ªãnh distube`);
            }
            if (typeof volumeToPlayMoi === 'number') {
              queue.setVolume(volumeToPlayMoi);
              if (config.debug) console.log(`[play.js] [playSong event] ƒê√£ set volume queue:`, volumeToPlayMoi);
            }
          }
        } catch (err) {
          console.error('[play.js] L·ªói khi set volume trong event playSong:', err);
        }
      };
      client.distube.on('playSong', playSongHandler);
      let routeResult = null;
      let routeStdout = '';
      let routeStderr = '';
      try {
        if (config.debug) {
          console.log(`[play.js] B·∫Øt ƒë·∫ßu routeToPlatform v·ªõi query:`, query);
          console.log(`[play.js] Lock key:`, lockKey);
          console.log(`[play.js] Voice channel:`, voiceChannel?.name, voiceChannel?.id);
          console.log(`[play.js] Volume s·∫Ω ph√°t:`, volumeToPlay);
        }

        // N·∫øu l√† playlist, truy·ªÅn callback d·ª´ng/ti·∫øp t·ª•c cho controller
        let isAdding = true;
        let stopAdd = () => { isAdding = false; if (config.debug) console.log('[play.js] ƒê√£ t·∫°m d·ª´ng th√™m playlist'); };
        let continueAdd = () => { isAdding = true; if (config.debug) console.log('[play.js] Ti·∫øp t·ª•c th√™m playlist'); };

        if (playlistAddController) {
          // L·∫•y queue hi·ªán t·∫°i ƒë·ªÉ theo d√µi
          const distubeQueue = client.distube.getQueue(interaction.guildId);
          playlistAddController.startTracking(interaction.guildId, distubeQueue, continueAdd, stopAdd);
        }

        // G·ªçi routeToPlatform v√† log stdout/stderr n·∫øu c√≥
        try {
          // N·∫øu l√† playlist, truy·ªÅn v√†o bi·∫øn ki·ªÉm so√°t isAdding ƒë·ªÉ c√°c h√†m th√™m b√†i ki·ªÉm tra tr∆∞·ªõc khi th√™m
          routeResult = await routeToPlatform(client, interaction, query, voiceChannel, lockKey, volumeToPlay, { isAddingRef: () => isAdding });
          if (routeResult && typeof routeResult === 'object') {
            if (routeResult.stdout) {
              routeStdout = routeResult.stdout;
              if (config.debug) console.log('[play.js] [routeToPlatform] stdout:', routeStdout);
            }
            if (routeResult.stderr) {
              routeStderr = routeResult.stderr;
              if (config.debug) console.log('[play.js] [routeToPlatform] stderr:', routeStderr);
            }
          }
        } catch (subErr) {
          if (subErr && subErr.stdout) {
            routeStdout = subErr.stdout;
            console.error('[play.js] [routeToPlatform] stdout (error):', routeStdout);
          }
          if (subErr && subErr.stderr) {
            routeStderr = subErr.stderr;
            console.error('[play.js] [routeToPlatform] stderr (error):', routeStderr);
          }
          throw subErr;
        }
        if (config.debug) console.log(`[play.js] routeToPlatform ho√†n th√†nh th√†nh c√¥ng`);
      } catch (err) {
        // B·∫Øt l·ªói JSON parse t·ª´ yt-dlp
        let userMsg = `‚ùå Kh√¥ng th·ªÉ ph√°t b√†i h√°t!\n\n${err.message || err}`;
        let isYtdlpJsonError = err && err.message && err.message.includes('is not valid JSON');
        let isRateLimit = false;
        let rawLog = '';
        if (isYtdlpJsonError) {
          console.error('[play.js] L·ªói JSON t·ª´ yt-dlp:', err.message);
          if (err.stdout) {
            console.error('[play.js] yt-dlp stdout:', err.stdout);
            rawLog += err.stdout;
          }
          if (err.stderr) {
            console.error('[play.js] yt-dlp stderr:', err.stderr);
            rawLog += err.stderr;
          }
          // Log th√™m stdout/stderr ƒë√£ thu ƒë∆∞·ª£c t·ª´ routeToPlatform n·∫øu c√≥
          if (routeStdout) {
            console.error('[play.js] yt-dlp stdout (routeToPlatform):', routeStdout);
            rawLog += routeStdout;
          }
          if (routeStderr) {
            console.error('[play.js] yt-dlp stderr (routeToPlatform):', routeStderr);
            rawLog += routeStderr;
          }
          // Ki·ªÉm tra c√°c t·ª´ kh√≥a li√™n quan rate limit/quota
          const rateKeywords = ['rate limit', 'quota', '429', 'exceeded', 'too many requests', 'temporarily unavailable', 'blocked', 'try again later'];
          if (rawLog && rateKeywords.some(k => rawLog.toLowerCase().includes(k))) {
            isRateLimit = true;
          }
        }
        // Log stdout/stderr k·ªÉ c·∫£ khi kh√¥ng ph·∫£i l·ªói JSON
        if (routeStdout) {
          console.log('[play.js] [routeToPlatform] stdout (always):', routeStdout);
        }
        if (routeStderr) {
          console.log('[play.js] [routeToPlatform] stderr (always):', routeStderr);
        }
        console.error(`[play.js] L·ªói chi ti·∫øt trong routeToPlatform:`, {
          message: err.message,
          name: err.name,
          stack: err.stack,
          code: err.code,
          statusCode: err.statusCode,
          errorCode: err.errorCode,
          details: err.details,
          query: query,
          guild: interaction.guild?.name,
          channel: interaction.channel?.name,
          user: interaction.user?.tag,
          lockKey: lockKey,
          volumeToPlay: volumeToPlay
        });
        // N·∫øu l√† DisTubeError: Queue th√¨ ch·ªâ log message
        if (err && err.name === 'DisTubeError' && err.message && err.message.includes('Queue')) {
          console.error('[play.js] PlayError (Queue):', err.message);
        } else {
          console.error('[play.js] PlayError (General):', err);
        }
        // X·ª≠ l√Ω th√¥ng b√°o l·ªói th√¢n thi·ªán h∆°n
        if (isRateLimit) {
          userMsg = '‚ùå C√≥ th·ªÉ b·∫°n ƒë√£ th√™m qu√° nhi·ªÅu b√†i li√™n t·ª•c, YouTube ƒëang gi·ªõi h·∫°n truy c·∫≠p (rate limit/quota). Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c gi·∫£m t·∫ßn su·∫•t th√™m b√†i.';
        } else if (err.message && (err.message.includes('private') || err.message.includes('unavailable') || err.message.includes('404'))) {
          userMsg = '‚ùå N·ªôi dung n√†y l√† ri√™ng t∆∞, kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ truy c·∫≠p!';
        } else if (err.message && err.message.includes('SPOTIFY_API_ERROR')) {
          userMsg = '‚ùå L·ªói Spotify API - c√≥ th·ªÉ do c·∫•u h√¨nh ho·∫∑c gi·ªõi h·∫°n v√πng!';
        } else if (err.message && err.message.includes('quota')) {
          userMsg = '‚ùå ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API!';
        } else if (err.message && err.message.includes('Queue')) {
          userMsg = '‚ùå Bot ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau!';
        }
        await interaction.followUp({
          content: userMsg,
          ephemeral: true
        });
      } finally {
        if (config.debug) console.log(`[play.js] Cleanup lock key:`, lockKey);
        if (client._addLock && client._addLock[lockKey]) {
          delete client._addLock[lockKey];
          if (client._addInfo && client._addInfo[lockKey]) {
            delete client._addInfo[lockKey];
          }
        }
        // X√≥a event listener sau khi ho√†n th√†nh ƒë·ªÉ tr√°nh leak b·ªô nh·ªõ
        client.distube.off('playSong', playSongHandler);
        // D·ª´ng controller khi xong
        if (playlistAddController) playlistAddController.stopTracking(interaction.guildId);
      }
    } catch (err) {
      console.error('[play.js] L·ªói ngo√†i c√πng trong execute:', err, 'interaction:', interaction);
      try {
        if (interaction && (interaction.deferred || interaction.replied)) {
          await interaction.followUp({ content: '‚ùå C√≥ l·ªói ngo√†i c√πng khi x·ª≠ l√Ω l·ªánh play!', ephemeral: true });
        } else if (interaction) {
          await interaction.reply({ content: '‚ùå C√≥ l·ªói ngo√†i c√πng khi x·ª≠ l√Ω l·ªánh play!', ephemeral: true });
        }
      } catch (e) {
        console.error('[play.js] L·ªói khi reply/followUp l·ªói ngo√†i c√πng:', e);
      }
    }
  },
}; 