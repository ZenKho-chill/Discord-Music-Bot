const { SlashCommandBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('laplai')
    .setDescription('Ch·∫ø ƒë·ªô l·∫∑p l·∫°i ph√°t nh·∫°c')
    .addStringOption(option =>
      option.setName('mode')
        .setDescription('Ch·ªçn ch·∫ø ƒë·ªô l·∫∑p l·∫°i')
        .setRequired(true)
        .setAutocomplete(true)
    ),

  async autocomplete(interaction) {
    try {
      const guildId = interaction.guildId;
      const queue = interaction.client.distube.getQueue(guildId);
      
      // T·∫°o danh s√°ch choices d·ª±a tr√™n queue
      const choices = [
        { name: '‚ùå T·∫Øt l·∫∑p l·∫°i', value: 'off' },
        { name: 'üîÇ L·∫∑p b√†i hi·ªán t·∫°i', value: 'song' }
      ];
      
      // N·∫øu queue c√≥ nhi·ªÅu h∆°n 2 b√†i th√¨ th√™m option l·∫∑p to√†n b·ªô
      if (queue && queue.songs && queue.songs.length > 2) {
        choices.push({ name: 'üîÅ L·∫∑p to√†n b·ªô h√†ng ƒë·ª£i', value: 'queue' });
      }
      
      const focusedValue = interaction.options.getFocused();
      const filtered = choices.filter(choice => 
        choice.name.toLowerCase().includes(focusedValue.toLowerCase()) ||
        choice.value.includes(focusedValue)
      );

      await interaction.respond(
        filtered.map(choice => ({
          name: choice.name,
          value: choice.value
        }))
      );
    } catch (error) {
      console.error('[repeat.js] L·ªói trong autocomplete:', error);
      // Fallback cho autocomplete
      await interaction.respond([
        { name: '‚ùå T·∫Øt l·∫∑p l·∫°i', value: 'off' },
        { name: 'üîÇ L·∫∑p b√†i hi·ªán t·∫°i', value: 'song' }
      ]);
    }
  },

  async execute(client, interaction) {
    const guildId = interaction.guildId;
    const queue = client.distube.getQueue(guildId);
    const mode = interaction.options.getString('mode');

    // Ki·ªÉm tra xem c√≥ b√†i h√°t trong queue kh√¥ng
    if (!queue || !queue.songs || !queue.songs[0]) {
      return interaction.reply({ 
        content: '‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ thi·∫øt l·∫≠p ch·∫ø ƒë·ªô l·∫∑p l·∫°i!', 
        ephemeral: true 
      });
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong k√™nh tho·∫°i kh√¥ng
    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) {
      return interaction.reply({
        content: 'üîá B·∫°n c·∫ßn v√†o k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!',
        ephemeral: true
      });
    }

    // Ki·ªÉm tra xem bot c√≥ trong c√πng k√™nh tho·∫°i kh√¥ng
    const botVoiceChannel = interaction.guild.members.me.voice.channel;
    if (botVoiceChannel && voiceChannel.id !== botVoiceChannel.id) {
      return interaction.reply({
        content: '‚ùå B·∫°n ph·∫£i ·ªü c√πng k√™nh tho·∫°i v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!',
        ephemeral: true
      });
    }

    // Ki·ªÉm tra gi√° tr·ªã mode h·ª£p l·ªá
    const validModes = ['off', 'song', 'queue'];
    if (!validModes.includes(mode)) {
      return interaction.reply({
        content: '‚ùå Ch·∫ø ƒë·ªô l·∫∑p l·∫°i kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ danh s√°ch.',
        ephemeral: true
      });
    }

    // Ki·ªÉm tra n·∫øu ch·ªçn queue mode nh∆∞ng kh√¥ng ƒë·ªß b√†i h√°t
    if (mode === 'queue' && queue.songs.length <= 2) {
      return interaction.reply({
        content: '‚ùå C·∫ßn c√≥ √≠t nh·∫•t 3 b√†i h√°t trong h√†ng ƒë·ª£i ƒë·ªÉ l·∫∑p to√†n b·ªô!',
        ephemeral: true
      });
    }

    try {
      let repeatMode;
      let emoji;
      let description;
      
      // Chuy·ªÉn ƒë·ªïi mode th√†nh DisTube repeat mode
      switch (mode) {
        case 'off':
          repeatMode = 0; // RepeatMode.DISABLED
          emoji = '‚ùå';
          description = 'ƒê√£ t·∫Øt ch·∫ø ƒë·ªô l·∫∑p l·∫°i';
          break;
        case 'song':
          repeatMode = 1; // RepeatMode.SONG
          emoji = 'üîÇ';
          description = 'L·∫∑p l·∫°i b√†i h√°t hi·ªán t·∫°i';
          break;
        case 'queue':
          repeatMode = 2; // RepeatMode.QUEUE
          emoji = 'üîÅ';
          description = 'L·∫∑p l·∫°i to√†n b·ªô h√†ng ƒë·ª£i';
          break;
      }
      
      // Thi·∫øt l·∫≠p ch·∫ø ƒë·ªô l·∫∑p l·∫°i
      client.distube.setRepeatMode(guildId, repeatMode);
      
      // T·∫°o th√¥ng tin b·ªï sung
      let additionalInfo = '';
      if (mode === 'song') {
        additionalInfo = `\nüé∂ **B√†i h√°t:** ${queue.songs[0].name}`;
      } else if (mode === 'queue') {
        additionalInfo = `\nüìä **H√†ng ƒë·ª£i:** ${queue.songs.length} b√†i h√°t`;
      }
      
      await interaction.reply({
        content: `${emoji} **${description}**${additionalInfo}\n\nüë§ **Thi·∫øt l·∫≠p b·ªüi:** ${interaction.user}\n\nüí° *S·ª≠ d·ª•ng \`/laplai\` ƒë·ªÉ thay ƒë·ªïi ch·∫ø ƒë·ªô l·∫∑p l·∫°i.*\n\nüìù **L∆∞u √Ω:** ${mode === 'song' ? 'Khi l·∫∑p 1 b√†i, b√†i h√°t s·∫Ω bi·∫øn m·∫•t kh·ªèi h√†ng ƒë·ª£i nh∆∞ng v·∫´n ti·∫øp t·ª•c ph√°t.' : ''}`,
        ephemeral: true
      });

    } catch (error) {
      console.error('[repeat.js] L·ªói khi thi·∫øt l·∫≠p ch·∫ø ƒë·ªô l·∫∑p l·∫°i:', error);
      await interaction.reply({
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p ch·∫ø ƒë·ªô l·∫∑p l·∫°i!',
        ephemeral: true
      });
    }
  }
};
