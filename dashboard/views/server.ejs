<!DOCTYPE html>
<html lang="vi">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="shortcut icon" href="../images/zk-logo.png" type="image/x-icon">
</head>

<body>
  <header class="header">
    <nav class="nav">
      <a href="/dashboard" class="logo">
        <i class="fas fa-music"></i>
        ZK Music Bot Dashboard
      </a>
      <ul class="nav-links">
        <li class="user-nav-info">
          <% if (user.avatar) { %>
          <img src="<%= user.avatar %>" alt="Avatar" class="nav-user-avatar">
          <% } else { %>
          <div class="nav-user-avatar nav-user-avatar-fallback">
            <%= user.username.charAt(0).toUpperCase() %>
          </div>
          <% } %>
          <span class="nav-user-name"><%= user.global_name || user.username %></span>
        </li>
        <li><a href="/logout" class="logout-btn">Đăng xuất</a></li>
      </ul>
    </nav>
  </header>

  <div class="container">
    <!-- Server Header -->
    <div class="dashboard-header fade-in" style="display: flex; min-height: 200px; overflow: visible;">
      <!-- Server Info + Back Button Container (30-40% space) -->
      <div style="flex: 0 0 35%; display: flex; flex-direction: column; padding: 1rem 0; gap: 2rem;">
        <div class="server-info" style="margin-bottom: 1rem;">
          <% if (guild.icon) { %>
          <img src="<%= guild.icon %>" alt="<%= guild.name %>" class="server-icon" style="width: 80px; height: 80px;">
          <% } else { %>
          <div class="server-icon" style="width: 80px; height: 80px; font-size: 2rem;">
            <%= guild.name.charAt(0).toUpperCase() %>
          </div>
          <% } %>
          <div class="server-details">
            <h2><%= guild.name %></h2>
            <p><i class="fas fa-users"></i> <%= guild.memberCount.toLocaleString() %> thành viên</p>
            <div class="bot-status">
              <div class="status-indicator status-online"></div>
              <span>Bot đang hoạt động</span>
            </div>
          </div>
        </div>

        <a href="/dashboard" class="discord-btn" style="background: #6c757d; align-self: flex-start;">
          <i class="fas fa-arrow-left"></i>
          Quay lại Dashboard
        </a>
      </div>

      <!-- Music Statistics Container (60-70% space) -->
      <% if (musicStats && (musicStats.totalTracks > 0)) { %>
      <div style="flex: 1; display: flex; align-items: center; justify-content: center; padding: 1rem; overflow: visible;">
        <div style="display: flex; flex-direction: column; width: 100%; max-width: 600px; position: relative; gap: 1rem; overflow: visible;">
          <!-- Platform Tooltip -->
          <div id="platformTooltip" style="position: absolute; top: -35px; background: rgba(0,0,0,0.9); color: white; padding: 0.5rem 1rem; border-radius: 6px; font-size: 0.9rem; display: none; z-index: 9999; white-space: nowrap; pointer-events: none; min-width: 100px; text-align: center; box-shadow: 0 4px 12px rgba(0,0,0,0.3); font-weight: 500;"></div>

          <!-- Platform Statistics Chart -->
          <div style="border-radius: 8px; overflow: visible;">
            <!-- Custom Platform Legend -->
            <div id="platformLegend" style="display: flex; justify-content: center; gap: 1rem; margin-bottom: 0.8rem; flex-wrap: wrap;"></div>
            <div style="height: 60px; position: relative; overflow: visible;">
              <canvas id="platformChart" style="max-height: 60px; width: 100%;"></canvas>
            </div>
          </div>

          <!-- Content Type Statistics Chart -->
          <div style="border-radius: 8px; overflow: visible;">
            <div style="height: 60px; position: relative; overflow: visible;">
              <canvas id="contentTypeChart" style="max-height: 60px; width: 100%;"></canvas>
            </div>
            <!-- Custom Content Type Legend -->
            <div id="contentTypeLegend" style="display: flex; justify-content: center; gap: 1rem; margin-top: 0.8rem; flex-wrap: wrap;"></div>
          </div>

          <!-- Content Type Tooltip -->
          <div id="contentTypeTooltip" style="position: absolute; bottom: -35px; background: rgba(0,0,0,0.9); color: white; padding: 0.5rem 1rem; border-radius: 6px; font-size: 0.9rem; display: none; z-index: 9999; white-space: nowrap; pointer-events: none; min-width: 100px; text-align: center; box-shadow: 0 4px 12px rgba(0,0,0,0.3); font-weight: 500;"></div>
        </div>
      </div>
      <% } else { %>
      <div style="flex: 1; display: flex; align-items: center; justify-content: center; padding: 1rem;">
        <div style="text-align: center; color: #666; background: rgba(255,255,255,0.1); border-radius: 8px; padding: 2rem;">
          <i class="fas fa-chart-bar" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
          <h4 style="margin: 0 0 0.5rem 0;">Chưa có dữ liệu thống kê</h4>
          <p style="margin: 0; font-size: 0.9rem;">Sử dụng lệnh phát nhạc để bắt đầu thu thập dữ liệu</p>
        </div>
      </div>
      <% } %>
    </div>

    <!-- Server Statistics Overview -->
    <% if (musicStats && (musicStats.totalTracks > 0)) { %>
    <div class="servers-section fade-in">
      <h3><i class="fas fa-chart-line"></i> Thống Kê Server Trực Tiếp</h3>
      <!-- Statistics Overview Cards -->
      <div class="servers-grid" style="grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); margin-bottom: 2rem;">
        <!-- ...các thẻ thống kê... -->
        <div class="server-card" style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white;">
          <h4 style="color: white;"><i class="fas fa-users"></i> Người Dùng Hoạt Động</h4>
          <div style="font-size: 2rem; font-weight: bold; text-align: center; margin: 1rem 0;">
            <%= serverStats.overview.totalUsers %>
          </div>
          <p style="text-align: center; color: rgba(255,255,255,0.8); margin: 0;">Đã tương tác với bot</p>
        </div>
        <div class="server-card" style="background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%); color: white;">
          <h4 style="color: white;"><i class="fas fa-terminal"></i> Lệnh Đã Dùng</h4>
          <div style="font-size: 2rem; font-weight: bold; text-align: center; margin: 1rem 0;">
            <%= serverStats.overview.totalCommands.toLocaleString() %>
          </div>
          <p style="text-align: center; color: rgba(255,255,255,0.8); margin: 0;">Tổng số lệnh</p>
        </div>
        <div class="server-card" style="background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white;">
          <h4 style="color: white;"><i class="fas fa-music"></i> Bài Đã Phát</h4>
          <div style="font-size: 2rem; font-weight: bold; text-align: center; margin: 1rem 0;">
            <%= serverStats.overview.totalTracks.toLocaleString() %>
          </div>
          <p style="text-align: center; color: rgba(255,255,255,0.8); margin: 0;">Tổng số bài nhạc</p>
        </div>
        <div class="server-card" style="background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%); color: white;">
          <h4 style="color: white;"><i class="fas fa-clock"></i> Thời Gian Nghe</h4>
          <div style="font-size: 2rem; font-weight: bold; text-align: center; margin: 1rem 0;">
            <%= Math.round((serverStats.overview.totalListeningTime || 0) / 3600) %>h
          </div>
          <p style="text-align: center; color: rgba(255,255,255,0.8); margin: 0;">Tổng thời gian</p>
        </div>
      </div>
      <!-- Top Users and Recent Activity -->
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
        <!-- Top Listeners -->
        <div class="server-card">
          <h4><i class="fas fa-headphones"></i> Top Người Nghe Nhạc</h4>
          <% if (serverStats.topListeners && serverStats.topListeners.length > 0) { %>
          <div style="max-height: 200px; overflow-y: auto;">
            <% serverStats.topListeners.slice(0, 5).forEach((listener, index) => { %>
            <div style="display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem 0; border-bottom: 1px solid rgba(0,0,0,0.1);">
              <div style="flex: 0 0 20px; text-align: center; font-weight: bold; color: #666;">
                #<%= index + 1 %>
              </div>
              <div style="flex: 1;">
                <div style="font-weight: bold; font-size: 0.9rem;"><%= listener.username %></div>
                <div style="font-size: 0.8rem; color: #666;">
                  <i class="fas fa-clock"></i> <%= listener.listeningHours %>h
                  • <i class="fas fa-music"></i> <%= listener.tracksPlayed %> bài
                </div>
              </div>
            </div>
            <% }); %>
          </div>
          <% } else { %>
          <p style="text-align: center; color: #666; margin: 1rem 0;">Chưa có dữ liệu</p>
          <% } %>
        </div>
        <!-- Top Commands -->
        <div class="server-card">
          <h4><i class="fas fa-terminal"></i> Lệnh Được Dùng Nhiều</h4>
          <% if (serverStats.commandStats && serverStats.commandStats.length > 0) { %>
          <div style="max-height: 200px; overflow-y: auto;">
            <% serverStats.commandStats.slice(0, 5).forEach((cmd, index) => { %>
            <div style="display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem 0; border-bottom: 1px solid rgba(0,0,0,0.1);">
              <div style="flex: 0 0 20px; text-align: center; font-weight: bold; color: #666;">
                #<%= index + 1 %>
              </div>
              <div style="flex: 1;">
                <div style="font-weight: bold; font-size: 0.9rem;">/<%= cmd.commandName %></div>
                <div style="font-size: 0.8rem; color: #666;">
                  <i class="fas fa-hashtag"></i> <%= cmd.totalUsage %> lần
                  • <i class="fas fa-users"></i> <%= cmd.uniqueUsers %> người
                </div>
              </div>
            </div>
            <% }); %>
          </div>
          <% } else { %>
          <p style="text-align: center; color: #666; margin: 1rem 0;">Chưa có dữ liệu</p>
          <% } %>
        </div>
      </div>
      <!-- Recent Activity -->
      <div class="server-card">
        <h4><i class="fas fa-history"></i> Hoạt Động Gần Đây</h4>
        <% if (serverStats.recentTracks && serverStats.recentTracks.length > 0) { %>
        <div style="max-height: 150px; overflow-y: auto;">
          <% serverStats.recentTracks.slice(0, 3).forEach((track, index) => { %>
          <div style="display: flex; align-items: center; gap: 1rem; padding: 0.5rem 0; border-bottom: 1px solid rgba(0,0,0,0.1);">
            <div style="flex: 0 0 auto;">
              <% if (track.platform === 'youtube') { %>
              <span style="background: #ff0000; color: white; padding: 0.2rem 0.5rem; border-radius: 3px; font-size: 0.7rem;">
                <i class="fab fa-youtube"></i> YT
              </span>
              <% } else if (track.platform === 'spotify') { %>
              <span style="background: #1db954; color: white; padding: 0.2rem 0.5rem; border-radius: 3px; font-size: 0.7rem;">
                <i class="fab fa-spotify"></i> SP
              </span>
              <% } else if (track.platform === 'soundcloud') { %>
              <span style="background: #ff7700; color: white; padding: 0.2rem 0.5rem; border-radius: 3px; font-size: 0.7rem;">
                <i class="fab fa-soundcloud"></i> SC
              </span>
              <% } %>
            </div>
            <div style="flex: 1;">
              <div style="font-weight: bold; font-size: 0.9rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                <%= track.title %>
              </div>
              <div style="font-size: 0.8rem; color: #666;">
                <i class="fas fa-user"></i> <%= track.username %>
                • <i class="fas fa-clock"></i> <%= new Date(track.playedAt).toLocaleString('vi-VN', {hour: '2-digit', minute: '2-digit'}) %>
              </div>
            </div>
          </div>
          <% }); %>
        </div>
        <% } else { %>
        <p style="text-align: center; color: #666; margin: 1rem 0;">Chưa có hoạt động gần đây</p>
        <% } %>
      </div>
    </div>
    <% } else { %>
    <!-- Không có thống kê server, không hiển thị gì ở đây -->
    <% } %>

    <!-- Server Management Sections -->
    <div class="servers-section fade-in">
      <h3><i class="fas fa-cog"></i> Quản lý Server</h3>

      <div class="servers-grid">
        <!-- Music Controls -->

        <!-- Volume Control -->
        <div class="server-card">
          <h4><i class="fas fa-volume-up"></i> Điều chỉnh âm lượng cá nhân</h4>
          <p>Thay đổi âm lượng phát nhạc cho riêng bạn</p>
          <div style="margin-top: 1rem;">
            <div style="position: relative; width: 100%;">
              <input type="range" id="volumeSlider" min="0" max="150" value="100" style="width: 100%; margin-bottom: 1rem;">
              <div id="volumeTooltip" style="position: absolute; left: 0; top: -32px; background: rgba(0,0,0,0.85); color: #fff; padding: 2px 10px; border-radius: 6px; font-size: 0.95rem; display: none; pointer-events: none; z-index: 10; white-space: nowrap; font-weight: 500; box-shadow: 0 2px 8px rgba(0,0,0,0.15);"></div>
            </div>
            <div style="display: flex; gap: 0.5rem; width: 100%;">
              <button class="manage-btn" style="flex:1; min-width:0;" onclick="setVolume(50)">50%</button>
              <button class="manage-btn" style="flex:1; min-width:0;" onclick="setVolume(100)">100%</button>
              <button class="manage-btn" style="flex:1; min-width:0;" onclick="setVolume(150)">150%</button>
            </div>
          </div>

          <div id="adminVolumeSection" style="display:none">
            <hr style="margin: 1.5rem 0 1rem 0; border: none; border-top: 1px solid #eee;">
            <h4><i class="fas fa-sliders-h"></i> Điều chỉnh âm lượng mặc định server</h4>
            <p>Chỉ admin mới có thể thay đổi âm lượng mặc định cho toàn server</p>
            <div style="margin-top: 1rem;">
              <div style="position: relative; width: 100%;">
                <input type="range" id="volumeDefaultSlider" min="0" max="150" value="<%= typeof serverStats !== 'undefined' && serverStats.volumeDefault ? serverStats.volumeDefault : 100 %>" style="width: 100%; margin-bottom: 1rem;">
                <div id="volumeDefaultTooltip" style="position: absolute; left: 0; top: -32px; background: rgba(0,0,0,0.85); color: #fff; padding: 2px 10px; border-radius: 6px; font-size: 0.95rem; display: none; pointer-events: none; z-index: 10; white-space: nowrap; font-weight: 500; box-shadow: 0 2px 8px rgba(0,0,0,0.15);"></div>
              </div>
              <div style="display: flex; gap: 0.5rem; width: 100%;">
                <button class="manage-btn" style="flex:1; min-width:0;" onclick="setVolumeDefault(50)">50%</button>
                <button class="manage-btn" style="flex:1; min-width:0;" onclick="setVolumeDefault(100)">100%</button>
                <button class="manage-btn" style="flex:1; min-width:0;" onclick="setVolumeDefault(150)">150%</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Server Settings -->
        <div class="server-card">
          <h4><i class="fas fa-cogs"></i> Cài đặt Server</h4>
          <p>Tùy chỉnh hoạt động của bot trong server</p>
          <div style="margin-top: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem;">
              <input type="checkbox" checked> Tự động rời khi hết nhạc
            </label>
            <label style="display: block; margin-bottom: 0.5rem;">
              <input type="checkbox" checked> Tự động tạm dừng khi phòng trống
            </label>
            <label style="display: block; margin-bottom: 1rem;">
              <input type="checkbox"> Chế độ DJ (chỉ DJ mới điều khiển)
            </label>
            <button class="manage-btn" onclick="saveSettings()">
              <i class="fas fa-save"></i> Lưu cài đặt
            </button>
          </div>
        </div>

      </div>
    </div>
  </div>

  <!-- Config for JavaScript -->
  <script>
    window.config = {
      debug: <%- JSON.stringify(debugMode || false) %>
    };
  </script>

  <script src="/js/dashboard.js"></script>
  <script>
    // Debug Mode Control - get from server config
    const DEBUG_MODE = window.config.debug;

    // Debug logging function
    function debugLog(...args) {
      if (DEBUG_MODE) {
        console.log(...args);
      }
    }

    function setVolume(volume) {
      // Đặt giá trị slider và gọi API lưu âm lượng cá nhân
      const slider = document.getElementById('volumeSlider');
      slider.value = volume;
      showNotification(`Đã đặt âm lượng: ${volume}%`, 'success');
      // Gửi request lưu âm lượng cá nhân
      fetch('/api/server/volume-user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            guildId: '<%= guild.id %>',
            userId: '<%= user.id %>',
            volume: Number(volume)
          })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            debugLog('Lưu âm lượng cá nhân thành công:', data);
          } else {
            console.error('Lỗi lưu âm lượng cá nhân:', data.message);
          }
        })
        .catch(err => {
          console.error('Lỗi kết nối API lưu âm lượng cá nhân:', err);
        });
    }

    // Hàm đặt âm lượng mặc định cho server (chỉ admin)
    function setVolumeDefault(volume) {
      // Đặt giá trị slider và gọi API lưu âm lượng mặc định server
      const slider = document.getElementById('volumeDefaultSlider');
      if (slider) {
        slider.value = volume;
        showNotification(`Đã đặt âm lượng mặc định server: ${volume}%`, 'success');
        // Gửi request lưu âm lượng mặc định server
        fetch(`/api/server/volume-default/<%= guild.id %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              volumeDefault: Number(volume)
            })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              debugLog('Lưu âm lượng mặc định server thành công:', data);
            } else {
              console.error('Lỗi lưu âm lượng mặc định server:', data.message);
            }
          })
          .catch(err => {
            console.error('Lỗi kết nối API lưu âm lượng mặc định server:', err);
          });
      }
    }


    function saveSettings() {
      showNotification('Đã lưu cài đặt', 'success');
    }


    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      // Kiểm tra quyền admin động qua API
      const adminSection = document.getElementById('adminVolumeSection');
      fetch(`/api/server/<%= guild.id %>`)
        .then(res => res.json())
        .then(data => {
          if (data.success && data.isAdmin) {
            adminSection.style.display = '';
          } else {
            adminSection.style.display = 'none';
          }
        })
        .catch(() => {
          adminSection.style.display = 'none';
        });

      // Lấy volume cá nhân user
      const volumeSlider = document.getElementById('volumeSlider');
      const volumeTooltip = document.getElementById('volumeTooltip');
      let volumeBefore = volumeSlider.value;
      // Khai báo volumeDefaultSlider và volumeDefaultTooltip chỉ 1 lần ở đây
      const volumeDefaultSlider = document.getElementById('volumeDefaultSlider');
      const volumeDefaultTooltip = document.getElementById('volumeDefaultTooltip');

      fetch(`/api/server/volume-user/<%= guild.id %>/<%= user.id %>`)
        .then(res => res.json())
        .then(data => {
          if (typeof data.volume === 'number') {
            volumeSlider.value = data.volume;
            volumeBefore = data.volume;
          }
        });

      // Lấy volume mặc định server
      if (volumeDefaultSlider) {
        fetch(`/api/server/volume-default/<%= guild.id %>`)
          .then(res => res.json())
          .then(data => {
            if (typeof data.volumeDefault === 'number') {
              volumeDefaultSlider.value = data.volumeDefault;
            }
          });
      }

      // Hàm cập nhật vị trí và giá trị tooltip
      function updateVolumeTooltip() {
        const value = volumeSlider.value;
        // Tính toán vị trí tooltip dựa trên giá trị slider
        const min = parseInt(volumeSlider.min);
        const max = parseInt(volumeSlider.max);
        const percent = (value - min) / (max - min);
        const sliderRect = volumeSlider.getBoundingClientRect();
        const tooltipRect = volumeTooltip.getBoundingClientRect();
        // Đặt tooltip ở giữa thumb
        const sliderWidth = sliderRect.width;
        const left = percent * sliderWidth;
        // Giới hạn vị trí để không bị tràn
        let tooltipLeft = left - (tooltipRect.width / 2);
        if (tooltipLeft < 0) tooltipLeft = 0;
        if (tooltipLeft + tooltipRect.width > sliderWidth) tooltipLeft = sliderWidth - tooltipRect.width;
        volumeTooltip.style.left = tooltipLeft + 'px';
        volumeTooltip.textContent = value + '%';
      }

      // Hiện tooltip khi kéo hoặc focus
      volumeSlider.addEventListener('input', function() {
        volumeTooltip.style.display = 'block';
        updateVolumeTooltip();
      });
      volumeSlider.addEventListener('focus', function() {
        volumeTooltip.style.display = 'block';
        updateVolumeTooltip();
      });

      // Ẩn tooltip khi nhả chuột hoặc blur
      volumeSlider.addEventListener('mouseup', function() {
        volumeTooltip.style.display = 'none';
        const volume = this.value;
        if (volume !== volumeBefore) {
          showNotification(`Âm lượng: ${volume}%`, 'info');
          // Gọi API lưu âm lượng cá nhân
          fetch('/api/server/volume-user', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                guildId: '<%= guild.id %>',
                userId: '<%= user.id %>',
                volume: Number(volume)
              })
            })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                debugLog('Lưu âm lượng cá nhân thành công:', data);
              } else {
                console.error('Lỗi lưu âm lượng cá nhân:', data.message);
              }
            })
            .catch(err => {
              console.error('Lỗi kết nối API lưu âm lượng cá nhân:', err);
            });
        }
      });
      volumeSlider.addEventListener('mouseleave', function() {
        volumeTooltip.style.display = 'none';
      });
      volumeSlider.addEventListener('blur', function() {
        volumeTooltip.style.display = 'none';
      });
      // Đảm bảo tương thích với cả thao tác bằng phím (keyboard)
      volumeSlider.addEventListener('change', function() {
        volumeTooltip.style.display = 'none';
        const volume = this.value;
        if (volume !== volumeBefore) {
          showNotification(`Âm lượng: ${volume}%`, 'info');
          // Gọi API lưu âm lượng cá nhân
          fetch('/api/server/volume-user', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                guildId: '<%= guild.id %>',
                userId: '<%= user.id %>',
                volume: Number(volume)
              })
            })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                debugLog('Lưu âm lượng cá nhân thành công:', data);
              } else {
                console.error('Lỗi lưu âm lượng cá nhân:', data.message);
              }
            })
            .catch(err => {
              console.error('Lỗi kết nối API lưu âm lượng cá nhân:', err);
            });
        }
      });
      // Lưu giá trị trước khi kéo
      volumeSlider.addEventListener('mousedown', function() {
        volumeBefore = this.value;
      });

      // Logic cho volumeDefaultSlider (chỉ admin mới có)
      if (volumeDefaultSlider && volumeDefaultTooltip) {
        let volumeDefaultBefore = volumeDefaultSlider.value;

        function updateVolumeDefaultTooltip() {
          const value = volumeDefaultSlider.value;
          const min = parseInt(volumeDefaultSlider.min);
          const max = parseInt(volumeDefaultSlider.max);
          const percent = (value - min) / (max - min);
          const sliderRect = volumeDefaultSlider.getBoundingClientRect();
          const tooltipRect = volumeDefaultTooltip.getBoundingClientRect();
          const sliderWidth = sliderRect.width;
          const left = percent * sliderWidth;
          let tooltipLeft = left - (tooltipRect.width / 2);
          if (tooltipLeft < 0) tooltipLeft = 0;
          if (tooltipLeft + tooltipRect.width > sliderWidth) tooltipLeft = sliderWidth - tooltipRect.width;
          volumeDefaultTooltip.style.left = tooltipLeft + 'px';
          volumeDefaultTooltip.textContent = value + '%';
        }
        volumeDefaultSlider.addEventListener('input', function() {
          volumeDefaultTooltip.style.display = 'block';
          updateVolumeDefaultTooltip();
        });
        volumeDefaultSlider.addEventListener('focus', function() {
          volumeDefaultTooltip.style.display = 'block';
          updateVolumeDefaultTooltip();
        });
        volumeDefaultSlider.addEventListener('mouseup', function() {
          volumeDefaultTooltip.style.display = 'none';
          const volume = this.value;
          if (volume !== volumeDefaultBefore) {
            showNotification(`Âm lượng mặc định server: ${volume}%`, 'info');
            // Gọi API lưu âm lượng mặc định server
            fetch(`/api/server/volume-default/<%= guild.id %>`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  volumeDefault: Number(volume)
                })
              })
              .then(res => res.json())
              .then(data => {
                if (data.success) {
                  debugLog('Lưu âm lượng mặc định server thành công:', data);
                } else {
                  console.error('Lỗi lưu âm lượng mặc định server:', data.message);
                }
              })
              .catch(err => {
                console.error('Lỗi kết nối API lưu âm lượng mặc định server:', err);
              });
          }
        });
        volumeDefaultSlider.addEventListener('mouseleave', function() {
          volumeDefaultTooltip.style.display = 'none';
        });
        volumeDefaultSlider.addEventListener('blur', function() {
          volumeDefaultTooltip.style.display = 'none';
        });
        volumeDefaultSlider.addEventListener('change', function() {
          volumeDefaultTooltip.style.display = 'none';
          const volume = this.value;
          if (volume !== volumeDefaultBefore) {
            showNotification(`Âm lượng mặc định server: ${volume}%`, 'info');
            // Gọi API lưu âm lượng mặc định server
            fetch(`/api/server/volume-default/<%= guild.id %>`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  volumeDefault: Number(volume)
                })
              })
              .then(res => res.json())
              .then(data => {
                if (data.success) {
                  debugLog('Lưu âm lượng mặc định server thành công:', data);
                } else {
                  console.error('Lỗi lưu âm lượng mặc định server:', data.message);
                }
              })
              .catch(err => {
                console.error('Lỗi kết nối API lưu âm lượng mặc định server:', err);
              });
          }
        });
        volumeDefaultSlider.addEventListener('mousedown', function() {
          volumeDefaultBefore = this.value;
        });
      }


      // Initialize Music Statistics Charts
      <% if (musicStats && musicStats.totalTracks > 0) { %>
      initializeMusicCharts();
      <% } %>
    });

    // Music Statistics Charts
    <% if (musicStats && musicStats.totalTracks > 0) { %>

    function initializeMusicCharts() {
      try {
        // Platform Chart Data (100% stacked bar chart)
        <% if (typeof platformStats !== 'undefined' && platformStats.length > 0) { %>
        const platformLabels = <%- JSON.stringify(platformStats.map(stat => stat.platform.toUpperCase())) %>;
        const platformCounts = <%- JSON.stringify(platformStats.map(stat => stat.count)) %>;
        const platformTotal = platformCounts.reduce((a, b) => a + b, 0);
        const platformPercentages = platformCounts.map(count => ((count / platformTotal) * 100).toFixed(1));

        // Create datasets for 100% stacked bar
        const platformDatasets = platformLabels.map((label, index) => {
          let backgroundColor, borderColor;

          // Set colors based on platform
          switch (label) {
            case 'YOUTUBE':
              backgroundColor = 'rgba(255, 0, 0, 0.8)';
              borderColor = '#CC0000';
              break;
            case 'SPOTIFY':
              backgroundColor = 'rgba(29, 185, 84, 0.8)';
              borderColor = '#1AA34A';
              break;
            case 'SOUNDCLOUD':
              backgroundColor = 'rgba(255, 119, 0, 0.8)';
              borderColor = '#E56600';
              break;
            default:
              backgroundColor = 'rgba(108, 117, 125, 0.8)';
              borderColor = '#5A6268';
          }

          // Only round corners for first and last segments
          let borderRadius = 0;
          let borderSkipped = false;

          if (index === 0) {
            // First segment - round left corners only
            borderRadius = {
              topLeft: 4,
              bottomLeft: 4,
              topRight: 0,
              bottomRight: 0
            };
            borderSkipped = false;
          } else if (index === platformLabels.length - 1) {
            // Last segment - round right corners only
            borderRadius = {
              topLeft: 0,
              bottomLeft: 0,
              topRight: 4,
              bottomRight: 4
            };
            borderSkipped = false;
          } else {
            // Middle segments - no rounded corners
            borderRadius = 0;
            borderSkipped = false;
          }

          return {
            label: label,
            data: [platformPercentages[index]],
            backgroundColor: backgroundColor,
            borderWidth: 0,
            borderRadius: borderRadius,
            borderSkipped: borderSkipped
          };
        });

        const platformData = {
          labels: [''],
          datasets: platformDatasets
        };

        // Create Platform Chart
        const platformCtx = document.getElementById('platformChart');
        if (platformCtx) {
          const platformChart = new Chart(platformCtx.getContext('2d'), {
            type: 'bar',
            data: platformData,
            options: {
              indexAxis: 'y',
              responsive: true,
              maintainAspectRatio: false,
              interaction: {
                intersect: false,
                mode: 'index'
              },
              scales: {
                x: {
                  beginAtZero: true,
                  display: false,
                  stacked: true,
                  max: 100
                },
                y: {
                  display: false,
                  stacked: true
                }
              },
              plugins: {
                legend: {
                  display: false
                },
                tooltip: {
                  enabled: false
                }
              },
              onHover: function(event, activeElements) {
                const tooltip = document.getElementById('platformTooltip');

                // Use manual detection exclusively for better accuracy
                const rect = this.canvas.getBoundingClientRect();
                const mouseX = event.native.clientX - rect.left;
                const chartArea = this.chartArea;

                if (mouseX >= chartArea.left && mouseX <= chartArea.right) {
                  const relativeX = mouseX - chartArea.left;
                  const totalWidth = chartArea.right - chartArea.left;
                  const mousePercentage = (relativeX / totalWidth) * 100;

                  // Find which segment the mouse is over - iterate in same order as datasets
                  let accumulatedPercentage = 0;
                  let foundSegment = false;

                  for (let i = 0; i < platformDatasets.length; i++) {
                    const segmentPercentage = parseFloat(platformPercentages[i]);
                    const segmentStart = accumulatedPercentage;
                    const segmentEnd = accumulatedPercentage + segmentPercentage;

                    if (mousePercentage >= segmentStart && mousePercentage <= segmentEnd) {
                      const value = platformCounts[i];
                      const label = platformLabels[i];
                      const percentage = platformPercentages[i];

                      const segmentCenter = segmentStart + (segmentPercentage / 2);
                      const tooltipX = chartArea.left + (segmentCenter * totalWidth / 100);

                      tooltip.innerHTML = `${label}: ${value} lượt (${percentage}%)`;
                      tooltip.style.display = 'block';
                      tooltip.style.left = Math.max(10, Math.min(tooltipX - tooltip.offsetWidth / 2, chartArea.right - tooltip.offsetWidth)) + 'px';
                      foundSegment = true;
                      return;
                    }
                    accumulatedPercentage += segmentPercentage;
                  }

                  if (!foundSegment) {
                    tooltip.style.display = 'none';
                  }
                } else {
                  tooltip.style.display = 'none';
                }
              },
              onLeave: function() {
                const tooltip = document.getElementById('platformTooltip');
                tooltip.style.display = 'none';
              }
            }
          });

          // Create custom platform legend
          const platformLegendContainer = document.getElementById('platformLegend');
          if (platformLegendContainer) {
            platformLegendContainer.innerHTML = '';
            platformLabels.forEach((label, index) => {
              const legendItem = document.createElement('div');
              legendItem.style.cssText = 'display: flex; align-items: center; gap: 0.4rem; font-size: 0.85rem; color: #333; font-weight: 500;';
              legendItem.innerHTML = `
                <div style="width: 14px; height: 14px; background: ${platformDatasets[index].backgroundColor}; border-radius: 3px;"></div>
                <span>${label} (${platformCounts[index]})</span>
              `;
              platformLegendContainer.appendChild(legendItem);
            });
          }

          // Add comprehensive mouse leave events to hide tooltip
          const platformChartContainer = platformCtx.closest('div[style*="position: relative"]');
          if (platformChartContainer) {
            platformChartContainer.addEventListener('mouseleave', function() {
              const tooltip = document.getElementById('platformTooltip');
              tooltip.style.display = 'none';
            });
          }

          // Also hide tooltip when mouse leaves chart canvas specifically
          platformCtx.addEventListener('mouseleave', function() {
            const tooltip = document.getElementById('platformTooltip');
            tooltip.style.display = 'none';
          });

          // Global mouse move event to hide tooltip when mouse is outside chart area
          document.addEventListener('mousemove', function(e) {
            const tooltip = document.getElementById('platformTooltip');
            if (tooltip && tooltip.style.display === 'block') {
              const rect = platformCtx.getBoundingClientRect();
              const chartArea = platformChart.chartArea;
              const absoluteLeft = rect.left + chartArea.left;
              const absoluteRight = rect.left + chartArea.right;
              const absoluteTop = rect.top + chartArea.top;
              const absoluteBottom = rect.top + chartArea.bottom;

              // Hide tooltip if mouse is outside chart area
              if (e.clientX < absoluteLeft || e.clientX > absoluteRight ||
                e.clientY < absoluteTop || e.clientY > absoluteBottom) {
                tooltip.style.display = 'none';
              }
            }
          });
        }
        <% } else { %>
        console.warn('No platform stats available');
        <% } %>

        // Content Type Chart Data (100% stacked bar chart)
        <% if (typeof contentTypeStats !== 'undefined' && contentTypeStats.length > 0) { %>
        const contentTypeLabels = <%- JSON.stringify(contentTypeStats.map(stat => stat.type === 'single' ? 'Đơn lẻ' : (stat.type === 'playlist' ? 'Playlist' : 'Album'))) %>;
        const contentTypeCounts = <%- JSON.stringify(contentTypeStats.map(stat => stat.count)) %>;
        const contentTypeTotal = contentTypeCounts.reduce((a, b) => a + b, 0);
        const contentTypePercentages = contentTypeCounts.map(count => ((count / contentTypeTotal) * 100).toFixed(1));

        // Create datasets for 100% stacked bar
        const contentTypeDatasets = contentTypeLabels.map((label, index) => {
          let backgroundColor, borderColor;

          // Set colors based on content type
          switch (label) {
            case 'Đơn lẻ':
              backgroundColor = 'rgba(40, 167, 69, 0.8)';
              borderColor = '#1e7e34';
              break;
            case 'Playlist':
              backgroundColor = 'rgba(0, 123, 255, 0.8)';
              borderColor = '#0056b3';
              break;
            case 'Album':
              backgroundColor = 'rgba(255, 193, 7, 0.8)';
              borderColor = '#e0a800';
              break;
            default:
              backgroundColor = 'rgba(108, 117, 125, 0.8)';
              borderColor = '#5A6268';
          }

          return {
            label: label,
            data: [contentTypePercentages[index]],
            backgroundColor: backgroundColor,
            borderWidth: 0,
            borderRadius: 4,
            borderSkipped: false
          };
        });

        const contentTypeData = {
          labels: [''],
          datasets: contentTypeDatasets
        };

        // Create Content Type Chart
        const contentTypeCtx = document.getElementById('contentTypeChart');
        if (contentTypeCtx) {
          const contentTypeChart = new Chart(contentTypeCtx.getContext('2d'), {
            type: 'bar',
            data: contentTypeData,
            options: {
              indexAxis: 'y',
              responsive: true,
              maintainAspectRatio: false,
              interaction: {
                intersect: false,
                mode: 'index'
              },
              scales: {
                x: {
                  beginAtZero: true,
                  display: false,
                  stacked: true,
                  max: 100
                },
                y: {
                  display: false,
                  stacked: true
                }
              },
              plugins: {
                legend: {
                  display: false
                },
                tooltip: {
                  enabled: false
                }
              },
              onHover: function(event, activeElements) {
                const tooltip = document.getElementById('contentTypeTooltip');

                // Use manual detection exclusively for better accuracy
                const rect = this.canvas.getBoundingClientRect();
                const mouseX = event.native.clientX - rect.left;
                const chartArea = this.chartArea;

                if (mouseX >= chartArea.left && mouseX <= chartArea.right) {
                  const relativeX = mouseX - chartArea.left;
                  const totalWidth = chartArea.right - chartArea.left;
                  const mousePercentage = (relativeX / totalWidth) * 100;

                  // Find which segment the mouse is over - iterate in same order as datasets
                  let accumulatedPercentage = 0;
                  let foundSegment = false;

                  for (let i = 0; i < contentTypeDatasets.length; i++) {
                    const segmentPercentage = parseFloat(contentTypePercentages[i]);
                    const segmentStart = accumulatedPercentage;
                    const segmentEnd = accumulatedPercentage + segmentPercentage;

                    if (mousePercentage >= segmentStart && mousePercentage <= segmentEnd) {
                      const value = contentTypeCounts[i];
                      const label = contentTypeLabels[i];
                      const percentage = contentTypePercentages[i];

                      const segmentCenter = segmentStart + (segmentPercentage / 2);
                      const tooltipX = chartArea.left + (segmentCenter * totalWidth / 100);

                      tooltip.innerHTML = `${label}: ${value} lượt (${percentage}%)`;
                      tooltip.style.display = 'block';
                      tooltip.style.left = Math.max(10, Math.min(tooltipX - tooltip.offsetWidth / 2, window.innerWidth - tooltip.offsetWidth - 10)) + 'px';
                      foundSegment = true;
                      return;
                    }
                    accumulatedPercentage += segmentPercentage;
                  }

                  if (!foundSegment) {
                    tooltip.style.display = 'none';
                  }
                } else {
                  tooltip.style.display = 'none';
                }
              },
              onLeave: function() {
                const tooltip = document.getElementById('contentTypeTooltip');
                tooltip.style.display = 'none';
              }
            }
          });

          // Create custom content type legend
          const contentTypeLegendContainer = document.getElementById('contentTypeLegend');
          if (contentTypeLegendContainer) {
            contentTypeLegendContainer.innerHTML = '';
            contentTypeLabels.forEach((label, index) => {
              const legendItem = document.createElement('div');
              legendItem.style.cssText = 'display: flex; align-items: center; gap: 0.4rem; font-size: 0.85rem; color: #333; font-weight: 500;';
              legendItem.innerHTML = `
                <div style="width: 14px; height: 14px; background: ${contentTypeDatasets[index].backgroundColor}; border-radius: 3px;"></div>
                <span>${label} (${contentTypeCounts[index]})</span>
              `;
              contentTypeLegendContainer.appendChild(legendItem);
            });
          }

          // Add comprehensive mouse leave events to hide tooltip
          const contentTypeChartContainer = contentTypeCtx.closest('div[style*="position: relative"]');
          if (contentTypeChartContainer) {
            contentTypeChartContainer.addEventListener('mouseleave', function() {
              const tooltip = document.getElementById('contentTypeTooltip');
              tooltip.style.display = 'none';
            });
          }

          // Also hide tooltip when mouse leaves chart canvas specifically
          contentTypeCtx.addEventListener('mouseleave', function() {
            const tooltip = document.getElementById('contentTypeTooltip');
            tooltip.style.display = 'none';
          });

          // Global mouse move event to hide tooltip when mouse is outside chart area
          document.addEventListener('mousemove', function(e) {
            const tooltip = document.getElementById('contentTypeTooltip');
            if (tooltip && tooltip.style.display === 'block') {
              const rect = contentTypeCtx.getBoundingClientRect();
              const chartArea = contentTypeChart.chartArea;
              const absoluteLeft = rect.left + chartArea.left;
              const absoluteRight = rect.left + chartArea.right;
              const absoluteTop = rect.top + chartArea.top;
              const absoluteBottom = rect.top + chartArea.bottom;

              // Hide tooltip if mouse is outside chart area
              if (e.clientX < absoluteLeft || e.clientX > absoluteRight ||
                e.clientY < absoluteTop || e.clientY > absoluteBottom) {
                tooltip.style.display = 'none';
              }
            }
          });
        }
        <% } else { %>
        console.warn('No content type stats available');
        <% } %>
      } catch (error) {
        console.error('Error initializing music charts:', error);
        // Show fallback message
        const chartContainers = document.querySelectorAll('#platformChart, #contentTypeChart');
        chartContainers.forEach(container => {
          if (container) {
            container.parentElement.innerHTML = '<div style="text-align: center; padding: 2rem; color: #666;"><i class="fas fa-exclamation-triangle"></i> Lỗi hiển thị biểu đồ</div>';
          }
        });
      }
    }
    <% } %>
  </script>
</body>

</html>