/*
 * T·ªáp n√†y l√† m·ªôt ph·∫ßn c·ªßa Discord Music Bot.
 *
 * Discord Music Bot l√† ph·∫ßn m·ªÅm mi·ªÖn ph√≠: b·∫°n c√≥ th·ªÉ ph√¢n ph·ªëi l·∫°i ho·∫∑c s·ª≠a ƒë·ªïi
 * theo c√°c ƒëi·ªÅu kho·∫£n c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë∆∞·ª£c c√¥ng b·ªë b·ªüi
 * T·ªï ch·ª©c Ph·∫ßn m·ªÅm T·ª± do, phi√™n b·∫£n 3 ho·∫∑c (n·∫øu b·∫°n mu·ªën) b·∫•t k·ª≥ phi√™n b·∫£n n√†o sau ƒë√≥.
 *
 * Discord Music Bot ƒë∆∞·ª£c ph√¢n ph·ªëi v·ªõi hy v·ªçng r·∫±ng n√≥ s·∫Ω h·ªØu √≠ch,
 * nh∆∞ng KH√îNG C√ì B·∫¢O H√ÄNH; th·∫≠m ch√≠ kh√¥ng bao g·ªìm c·∫£ b·∫£o ƒë·∫£m
 * V·ªÄ T√çNH TH∆Ø∆†NG M·∫†I ho·∫∑c PH√ô H·ª¢P CHO M·ªòT M·ª§C ƒê√çCH C·ª§ TH·ªÇ. Xem
 * Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
 *
 * B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt b·∫£n sao c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU c√πng v·ªõi Discord Music Bot.
 * N·∫øu kh√¥ng, h√£y xem <https://www.gnu.org/licenses/>.
 */

const config = require("../config.js");
const { EmbedBuilder, InteractionType, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
const db = require("../mongoDB");
const fs = require("fs");

module.exports = async (client, interaction) => {

  try {
    if (!interaction?.guild) {
      return interaction?.reply({ content: "ƒêang b·ªã gi·ªõi h·∫°n t·∫ßn su·∫•t.", ephemeral: true });
    } else {

      function cmd_loader() {
        if (interaction?.type === InteractionType.ApplicationCommand) {
          fs.readdir(config.commandsdir, (err, files) => {
            if (err) throw err;
            files.forEach(async (f) => {
              let props = require(`.${config.commandsdir}/${f}`);
              if (interaction.commandName === props.name) {
                try {
                  let data = await db?.musicbot?.findOne({ guildID: interaction?.guild?.id });
                  if (data?.channels?.length > 0) {

                    let channel_control = await data?.channels?.filter(x => !interaction?.guild?.channels?.cache?.get(x?.channel));

                    if (channel_control?.length > 0) {
                      for (const x of channel_control) {
                        await db?.musicbot?.updateOne({ guildID: interaction?.guild?.id }, { 
                          $pull: { 
                            channels: { 
                              channel: x?.channel 
                            } 
                          } 
                        }, { upsert: true }).catch(e => { });
                      }
                    } else {
                      data = await db?.musicbot?.findOne({ guildID: interaction?.guild?.id });
                      let channel_filter = data?.channels?.filter(x => x.channel === interaction?.channel?.id);

                      if (!channel_filter?.length > 0 && !interaction?.member?.permissions?.has("0x0000000000000020")) {
                        channel_filter = data?.channels?.map(x => `<#${x.channel}>`).join(", ");
                        return interaction?.reply({ content: `üî¥ Gi·ªõi h·∫°n t·∫ßn su·∫•t ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng cho k√™nh: ${channel_filter}`, ephemeral: true }).catch(e => { });
                      }
                    }
                  }

                  if (interaction?.member?.permissions?.has(props?.permissions || "0x0000000000000800")) {
                    const DJ = client.config.opt.DJ;
                    if (props && DJ.commands.includes(interaction?.commandName)) {
                      let djRole = await db?.musicbot?.findOne({ guildID: interaction?.guild?.id }).catch(e => { });
                      if (djRole) {
                        const roleDJ = interaction?.guild?.roles?.cache?.get(djRole?.role);
                        if (!interaction?.member?.permissions?.has("0x0000000000000020")) {
                          if (roleDJ) {
                            if (!interaction?.member?.roles?.cache?.has(roleDJ?.id)) {

                              const embed = new EmbedBuilder()
                                .setColor(client.config.embedColor)
                                .setTitle(client?.user?.username)
                                .setThumbnail(client?.user?.displayAvatarURL())
                                .setTimestamp()

                              return interaction?.reply({ embeds: [embed], ephemeral: true }).catch(e => { });
                            }
                          }
                        }
                      }
                    }

                    if (props && props.voiceChannel) {
                      if (!interaction?.member?.voice?.channelId) return interaction?.reply({ content: `üî¥ Vui l√≤ng tham gia k√™nh tho·∫°i tr∆∞·ªõc!`, ephemeral: true }).catch(e => { });
                      const guild_me = interaction?.guild?.members?.cache?.get(client?.user?.id);
                      if (guild_me?.voice?.channelId) {
                        if (guild_me?.voice?.channelId !== interaction?.member?.voice?.channelId) {
                          return interaction?.reply({ content: `üî¥ B·∫°n ph·∫£i ·ªü trong c√πng k√™nh tho·∫°i!`, ephemeral: true }).catch(e => { });
                        }
                      }
                    }
                    return props.run(client, interaction);
                    
                  } else {
                    return interaction?.reply({ content: `‚ñ∂Ô∏è Thi·∫øu quy·ªÅn: **${props?.permissions?.replace("0x0000000000000020", "QU·∫¢N L√ù GUILD")?.replace("0x0000000000000800", "G·ª¨I TIN NH·∫ÆN") || "G·ª¨I TIN NH·∫ÆN"}**`, ephemeral: true });
                  }
                } catch (e) {
                  return interaction?.reply({ content: `‚ùå L·ªói...\n\n\`\`\`${e?.message}\`\`\``, ephemeral: true });
                }
              }
            });
          });
        }
      }

      if(config.voteManager.status === true && config.voteManager.api_key) {
        if(config.voteManager.vote_commands.includes(interaction?.commandName)) {
          try {
            const topSdk = require("@top-gg/sdk");
            let topApi = new topSdk.Api(config.voteManager.api_key, client);
            await topApi?.hasVoted(interaction?.user?.id).then(async voted => {
              if (!voted) {
                const embed2 = new EmbedBuilder()
                  .setTitle("B·∫ßu ch·ªçn "+client?.user?.username)
                  .setColor(client?.config?.embedColor);
                return interaction?.reply({ content: "", embeds: [embed2], ephemeral: true });
              } else {
                cmd_loader();
              }
            })
          } catch (e) {
            cmd_loader();
          }
        } else {
          cmd_loader();
        }
      } else {
        cmd_loader();
      }

    }
  } catch (e) {
    console.error(e);
  }
}
