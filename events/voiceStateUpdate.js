const hotReloader = require('../utils/hotReload');
const autoLeaveManager = require('../utils/autoLeaveManager');
const logger = require('../utils/logger');

// L∆∞u tr·ªØ ID timeout cho m·ªói m√°y ch·ªß
const leaveTimeouts = new Map();

module.exports = (client) => {
  client.on('voiceStateUpdate', (oldState, newState) => {
    const config = hotReloader.getCurrentConfig();
    
    // B·ªè qua n·∫øu t·ª± r·ªùi khi ph√≤ng tr·ªëng b·ªã t·∫Øt
    if (!config.leaveOnEmpty?.empty?.enabled) {
      if (config.debug) {
      if (config.debug) {
        logger.autoLeave(`[AutoLeave] T·ª± r·ªùi b·ªã t·∫Øt trong c·∫•u h√¨nh`);
      }
      }
      return;
    }

    const guild = oldState.guild || newState.guild;
    
    // N·∫øu bot ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ r·ªùi c·ªë √Ω, ngƒÉn m·ªçi n·ªó l·ª±c k·∫øt n·ªëi l·∫°i
    if (autoLeaveManager.isGuildBlocked(guild.id)) {
      // Ch·ªâ x√≥a c·ªù n·∫øu ng∆∞·ªùi d√πng th·∫≠t tham gia k√™nh tho·∫°i
      if (newState.channelId && !newState.member?.user.bot) {
        const botVoiceChannel = guild.members.cache.get(client.user.id)?.voice?.channel;
        if (!botVoiceChannel) {
          autoLeaveManager.unblockGuild(guild.id);
        }
      }
      return; // B·ªè qua x·ª≠ l√Ω khi vi·ªác k·∫øt n·ªëi l·∫°i b·ªã ngƒÉn
    }
    
    // B·ªè qua n·∫øu ƒë√¢y l√† bot ch√≠nh n√≥ thay ƒë·ªïi tr·∫°ng th√°i tho·∫°i (ƒë·ªÉ ngƒÉn v√≤ng l·∫∑p)
    if (oldState.member?.id === client.user.id || newState.member?.id === client.user.id) {
      // Kh√¥ng ghi log ƒë·ªÉ gi·∫£m spam, ch·ªâ b·ªè qua
      return;
    }
    
    const botVoiceChannel = guild.members.cache.get(client.user.id)?.voice?.channel;
    
    // N·∫øu bot kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o, b·ªè qua
    if (!botVoiceChannel) {
      if (config.debug && (oldState.member?.user.bot === false || newState.member?.user.bot === false)) {
        console.log(`[AutoLeave] Bot kh√¥ng trong k√™nh tho·∫°i n√†o, b·ªè qua`);
      }
      return;
    }

    // Ch·ªâ ti·∫øn h√†nh n·∫øu c·∫≠p nh·∫≠t tr·∫°ng th√°i tho·∫°i ·∫£nh h∆∞·ªüng ƒë·∫øn k√™nh tho·∫°i c·ªßa bot
    const isRelevantUpdate = oldState.channelId === botVoiceChannel.id || 
                            newState.channelId === botVoiceChannel.id;
    
    if (!isRelevantUpdate) {
      return;
    }

    // ƒê·∫øm ng∆∞·ªùi d√πng th·∫≠t (kh√¥ng ph·∫£i bot) trong k√™nh tho·∫°i
    const realUsers = botVoiceChannel.members.filter(member => !member.user.bot);
    
    if (config.debug) {
      const userName = oldState.member?.displayName || newState.member?.displayName || 'Kh√¥ng x√°c ƒë·ªãnh';
      const userIsBot = oldState.member?.user.bot || newState.member?.user.bot;
      const action = oldState.channelId && !newState.channelId ? 'r·ªùi' :
                    !oldState.channelId && newState.channelId ? 'tham gia' : 'di chuy·ªÉn';
      
      if (config.debug) {
        console.log(`[AutoLeave] Ng∆∞·ªùi d√πng ${userName} (bot: ${userIsBot}) ${action} k√™nh tho·∫°i: ${botVoiceChannel.name}`);
        console.log(`[AutoLeave] Th√†nh vi√™n k√™nh:`, botVoiceChannel.members.map(m => `${m.displayName} (bot: ${m.user.bot})`).join(', '));
        console.log(`[AutoLeave] Ng∆∞·ªùi d√πng th·∫≠t c√≤n l·∫°i: ${realUsers.size}`);
      }
    }

    // N·∫øu v·∫´n c√≤n ng∆∞·ªùi d√πng th·∫≠t, x√≥a timeout hi·ªán c√≥
    if (realUsers.size > 0) {
      if (leaveTimeouts.has(guild.id)) {
        clearTimeout(leaveTimeouts.get(guild.id));
        leaveTimeouts.delete(guild.id);
        if (config.debug) {
          console.log(`[T·ª± R·ªùi] ƒê√£ h·ªßy h·∫πn gi·ªù r·ªùi ph√≤ng cho m√°y ch·ªß ${guild.name} - c√≥ ng∆∞·ªùi d√πng tr·ªü l·∫°i`);
        }
      }
      
      // T·ª± ƒë·ªông ti·∫øp t·ª•c n·∫øu nh·∫°c b·ªã t·∫°m d·ª´ng do k√™nh tr·ªëng
      if (config.leaveOnEmpty.empty.pauseOnEmpty) {
        const queue = client.distube.getQueue(guild.id);
        if (queue && queue.paused) {
          try {
            client.distube.resume(guild.id);
            if (config.debug) console.log(`[T·ª± R·ªùi] ‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c trong ${guild.name} - c√≥ ng∆∞·ªùi d√πng quay l·∫°i`);
          } catch (error) {
            if (config.debug) {
              console.error(`[T·ª± R·ªùi] L·ªói khi ti·∫øp t·ª•c nh·∫°c:`, error.message);
            }
          }
        }
      }
      return;
    }

    // N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng th·∫≠t v√† ch∆∞a ƒë·∫∑t timeout, b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
    if (!leaveTimeouts.has(guild.id)) {
      const timeout = config.leaveOnEmpty.empty.timeout || 30; // M·∫∑c ƒë·ªãnh 30 gi√¢y
      
      if (config.debug) console.log(`[T·ª± R·ªùi] üîÑ Ph√≤ng tho·∫°i tr·ªëng, bot s·∫Ω r·ªùi sau ${timeout} gi√¢y...`);
      
      const timeoutId = setTimeout(async () => {
        try {
          // Ki·ªÉm tra l·∫°i k√™nh c√≥ v·∫´n tr·ªëng kh√¥ng
          const currentBotChannel = guild.members.cache.get(client.user.id)?.voice?.channel;
          if (currentBotChannel) {
            const currentRealUsers = currentBotChannel.members.filter(member => !member.user.bot);
            
            if (currentRealUsers.size === 0) {
              const queue = client.distube.getQueue(guild.id);
              
              if (queue) {
                if (config.leaveOnEmpty.empty.pauseOnEmpty) {
                  // T·∫°m d·ª´ng nh·∫°c thay v√¨ d·ª´ng
                  if (!queue.paused) {
                    try {
                      client.distube.pause(guild.id);
                      if (config.debug) console.log(`[T·ª± R·ªùi] ‚è∏Ô∏è Bot ƒë√£ t·∫°m d·ª´ng nh·∫°c trong ${guild.name} - ph√≤ng tho·∫°i tr·ªëng`);
                    } catch (e) {
                      console.error(`[T·ª± R·ªùi] ‚ùå L·ªói khi t·∫°m d·ª´ng nh·∫°c:`, e.message);
                    }
                  }
                } else {
                  // D·ª´ng nh·∫°c v√† r·ªùi
                  try {
                    // ƒê·∫∑t c·ªù ƒë·ªÉ ngƒÉn k·∫øt n·ªëi l·∫°i TR∆Ø·ªöC khi d·ª´ng
                    autoLeaveManager.blockGuild(guild.id);
                    
                    // Tr∆∞·ªõc ti√™n d·ª´ng nh·∫°c ho√†n to√†n
                    await client.distube.stop(guild.id);
                    if (config.debug) console.log(`[T·ª± R·ªùi] üéµ Bot ƒë√£ d·ª´ng nh·∫°c trong ${guild.name}`);
                    
                    // X√≥a m·ªçi thao t√°c DisTube ƒëang ch·ªù
                    const queue = client.distube.getQueue(guild.id);
                    if (queue) {
                      try {
                        queue.destroy();
                        if (config.debug) console.log(`[T·ª± R·ªùi] üóëÔ∏è ƒê√£ h·ªßy h√†ng ƒë·ª£i trong ${guild.name}`);
                      } catch (destroyError) {
                        if (config.debug) console.log(`[T·ª± R·ªùi] H√†ng ƒë·ª£i ƒë√£ ƒë∆∞·ª£c h·ªßy ho·∫∑c l·ªói:`, destroyError.message);
                      }
                    }
                    
                    // √âp bu·ªôc ng·∫Øt k·∫øt n·ªëi v√† h·ªßy k·∫øt n·ªëi tho·∫°i
                    const voiceConnection = guild.members.me.voice;
                    if (voiceConnection && voiceConnection.channel) {
                      try {
                        // H·ªßy k·∫øt n·ªëi tho·∫°i ho√†n to√†n
                        await voiceConnection.disconnect();
                        if (config.debug) console.log(`[T·ª± R·ªùi] üö™ Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh tho·∫°i trong ${guild.name}`);
                        
                        // D·ªçn d·∫πp b·ªï sung - h·ªßy m·ªçi k·∫øt n·ªëi tho·∫°i c√≤n l·∫°i
                        const connection = guild.client.voice?.connections?.get(guild.id);
                        if (connection) {
                          connection.destroy();
                          if (config.debug) console.log(`[T·ª± R·ªùi] üî• ƒê√£ h·ªßy k·∫øt n·ªëi tho·∫°i trong ${guild.name}`);
                        }
                      } catch (disconnectError) {
                        console.error(`[T·ª± R·ªùi] ‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi:`, disconnectError.message);
                      }
                    }
                    
                    // An to√†n b·ªï sung: Th·ª≠ r·ªùi b·∫±ng DisTube voices
                    try {
                      await client.distube.voices.leave(guild.id);
                      if (config.debug) console.log(`[T·ª± R·ªùi] üö® DisTube voices r·ªùi d·ª± ph√≤ng trong ${guild.name}`);
                    } catch (disTubeLeaveError) {
                      if (config.debug) console.log(`[T·ª± R·ªùi] DisTube voices r·ªùi th·∫•t b·∫°i:`, disTubeLeaveError.message);
                    }
                    
                  } catch (e) {
                    console.error(`[T·ª± R·ªùi] ‚ùå L·ªói khi d·ª´ng nh·∫°c:`, e.message);
                    // Ngay c·∫£ khi d·ª´ng th·∫•t b·∫°i, v·∫´n c·ªë ng·∫Øt k·∫øt n·ªëi √©p bu·ªôc
                    try {
                      autoLeaveManager.blockGuild(guild.id);
                      const voiceConnection = guild.members.me.voice;
                      if (voiceConnection) {
                        await voiceConnection.disconnect();
                        if (config.debug) console.log(`[T·ª± R·ªùi] üö™ Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi (d·ª± ph√≤ng) kh·ªèi k√™nh tho·∫°i trong ${guild.name}`);
                      }
                      // √âp bu·ªôc h·ªßy k·∫øt n·ªëi
                      const connection = guild.client.voice?.connections?.get(guild.id);
                      if (connection) {
                        connection.destroy();
                        if (config.debug) console.log(`[T·ª± R·ªùi] üî• ƒê√£ √©p bu·ªôc h·ªßy k·∫øt n·ªëi tho·∫°i trong ${guild.name}`);
                      }
                    } catch (fallbackError) {
                      console.error(`[T·ª± R·ªùi] ‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi d·ª± ph√≤ng:`, fallbackError.message);
                    }
                  }
                }
              } else {
                // Ch·ªâ r·ªùi k√™nh tho·∫°i n·∫øu kh√¥ng c√≥ h√†ng ƒë·ª£i
                try {
                  autoLeaveManager.blockGuild(guild.id);
                  await guild.members.me.voice.disconnect();
                  if (config.debug) console.log(`[T·ª± R·ªùi] üö™ Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi ph√≤ng tho·∫°i trong ${guild.name} - kh√¥ng c√≥ nh·∫°c ƒëang ph√°t`);
                } catch (e) {
                  console.error(`[T·ª± R·ªùi] ‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi tho·∫°i:`, e.message);
                }
              }
            } else {
              if (config.debug) {
                console.log(`[T·ª± R·ªùi] ƒê√£ c√≥ ng∆∞·ªùi d√πng tr·ªü l·∫°i, kh√¥ng r·ªùi ph√≤ng`);
              }
            }
          }
        } catch (error) {
          console.error(`[T·ª± R·ªùi] ‚ùå L·ªói khi x·ª≠ l√Ω t·ª± r·ªùi:`, error.message);
        } finally {
          leaveTimeouts.delete(guild.id);
        }
      }, timeout * 1000);

      leaveTimeouts.set(guild.id, timeoutId);
    }
  });

  // D·ªçn d·∫πp timeout khi bot r·ªùi server
  client.on('guildDelete', (guild) => {
    if (leaveTimeouts.has(guild.id)) {
      clearTimeout(leaveTimeouts.get(guild.id));
      leaveTimeouts.delete(guild.id);
    }
    autoLeaveManager.cleanupGuild(guild.id);
  });
};
