/*
 * T·ªáp n√†y l√† m·ªôt ph·∫ßn c·ªßa Discord Music Bot.
 *
 * Discord Music Bot l√† ph·∫ßn m·ªÅm mi·ªÖn ph√≠: b·∫°n c√≥ th·ªÉ ph√¢n ph·ªëi l·∫°i ho·∫∑c s·ª≠a ƒë·ªïi
 * theo c√°c ƒëi·ªÅu kho·∫£n c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë∆∞·ª£c c√¥ng b·ªë b·ªüi
 * T·ªï ch·ª©c Ph·∫ßn m·ªÅm T·ª± do, phi√™n b·∫£n 3 ho·∫∑c (n·∫øu b·∫°n mu·ªën) b·∫•t k·ª≥ phi√™n b·∫£n n√†o sau ƒë√≥.
 *
 * Discord Music Bot ƒë∆∞·ª£c ph√¢n ph·ªëi v·ªõi hy v·ªçng r·∫±ng n√≥ s·∫Ω h·ªØu √≠ch,
 * nh∆∞ng KH√îNG C√ì B·∫¢O H√ÄNH; th·∫≠m ch√≠ kh√¥ng bao g·ªìm c·∫£ b·∫£o ƒë·∫£m
 * V·ªÄ T√çNH TH∆Ø∆†NG M·∫†I ho·∫∑c PH√ô H·ª¢P CHO M·ªòT M·ª§C ƒê√çCH C·ª§ TH·ªÇ. Xem
 * Gi·∫•y ph√©p C√¥ng c·ªông GNU ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
 *
 * B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt b·∫£n sao c·ªßa Gi·∫•y ph√©p C√¥ng c·ªông GNU c√πng v·ªõi Discord Music Bot.
 * N·∫øu kh√¥ng, h√£y xem <https://www.gnu.org/licenses/>.
 */

const db = require('../mongoDB');
module.exports = async (client, oldState, newState) => {
  const queue = client.player.getQueue(oldState.guild.id);
  if (queue || queue?.playing) {
    if (client?.config?.opt?.voiceConfig?.leaveOnEmpty?.status === true) {
      setTimeout(async () => {
        let botChannel = oldState?.guild?.channels?.cache?.get(queue?.voice?.connection?.joinConfig?.channelId);
        if (botChannel) {
          if (botChannel.id == oldState.channelId) {
            if (botChannel?.members?.find(x => x == client?.user?.id)) {
              if (botChannel?.members?.size == 1){
                await queue?.textChannel?.send({ content: 'üî¥ Ng∆∞·ªùi d√πng ƒë√£ r·ªùi kh·ªèi k√™nh' }).catch(e => { });
                if (queue || queue?.playing) {
                  return queue?.stop(oldState.guild.id);
                }
              }
            }
          }
        }
      }, (client?.config?.opt?.voiceConfig?.leaveOnEmpty?.cooldown || 60) * 1000);
    }
    if (newState.id === client.user.id) {
      if (oldState.serverMute === false && newState.serverMute === true) {
        if (queue?.textChannel) {
          try {
            await queue?.pause();
          } catch (e) {
            return;
          }
          await queue?.textChannel?.send({ content: 'üî¥ ƒê√£ b·ªã t·∫Øt ti·∫øng' });
        }
      }
      if (oldState.serverMute === true && newState.serverMute === false) {
        if (queue?.textChannel) {
          try {
            await queue.resume();
          } catch (e) {
            return;
          }
        }
      }
    }
  }
}