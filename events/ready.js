/*
 * Tр╗Єp n├аy l├а mр╗Ўt phр║Дn cр╗Дa Discord Music Bot.
 *
 * Discord Music Bot l├а phр║Дn mр╗Ђm miр╗Ёn ph├Г: bр║Аn c├│ thр╗Ѓ ph├бn phр╗Љi lр║Аi hoр║иc sр╗Гa ─Љр╗Ћi
 * theo c├Аc ─Љiр╗Ђu khoр║Бn cр╗Дa Giр║Цy ph├Еp C├┤ng cр╗Ўng GNU ─Љк░р╗Бc c├┤ng bр╗Љ bр╗Ъi
 * Tр╗Ћ chр╗Еc Phр║Дn mр╗Ђm Tр╗▒ do, phi├фn bр║Бn 3 hoр║иc (nр║┐u bр║Аn muр╗Љn) bр║Цt kр╗│ phi├фn bр║Бn n├аo sau ─Љ├│.
 *
 * Discord Music Bot ─Љк░р╗Бc ph├бn phр╗Љi vр╗Џi hy vр╗Їng rр║▒ng n├│ sр║й hр╗»u ├Гch,
 * nhк░ng KH├ћNG C├Њ Bр║бO H├ђNH; thр║Гm ch├Г kh├┤ng bao gр╗Њm cр║Б bр║Бo ─Љр║Бm
 * Vр╗ђ T├ЇNH THк»каNG Mр║аI hoр║иc PH├Ў Hр╗бP CHO Mр╗ўT Mр╗цC ─љ├ЇCH Cр╗ц THр╗ѓ. Xem
 * Giр║Цy ph├Еp C├┤ng cр╗Ўng GNU ─Љр╗Ѓ biр║┐t th├фm chi tiр║┐t.
 *
 * Bр║Аn sр║й nhр║Гn ─Љк░р╗Бc mр╗Ўt bр║Бn sao cр╗Дa Giр║Цy ph├Еp C├┤ng cр╗Ўng GNU c├╣ng vр╗Џi Discord Music Bot.
 * Nр║┐u kh├┤ng, h├Бy xem <https://www.gnu.org/licenses/>.
 */

const config = require('../config');
const { ActivityType } = require('discord.js');
module.exports = async (client) => {
  if (config.mongodbURL || process.env.MONGO) {
    const { REST } = require("@discordjs/rest");
    const { Routes } = require("discord-api-types/v10");
    const rest = new REST({ version: '10' }).setToken(config.TOKEN || process.env.TOKEN);
    (async () => {
      try {
        await rest.put(Routes.applicationCommands(client.user.id), {
          body: await client.commands,
        });
        console.log('\x1b[36m%s\x1b[0m', '|    ­Ъџђ ─љ├Б tр║Бi lр╗Єnh ')
      } catch (err) {
        console.log('\x1b[36m%s\x1b[0m', '|     ­Ъџђ Ngк░ng tр║Бi lр╗Єnh');
        console.error(err);
      }
    })();
    console.log('\x1b[32m%s\x1b[0m', `|     ­Ъї╝ ─љ─Ѓng nhр║Гp vр╗Џi ${client.user.username}`);
    setInterval(() => client.user.setActivity({
      name: `Nghe nhр║Аc chill chill... D├╣ng '/help' nh├Е!`,
      type: ActivityType.Watching
    }), 10000);
  } else {
    console.log('\x1b[36m%s\x1b[0m', '|     ­ЪЇћ Lр╗Ќi mongoDB')
  }
  console.log('\x1b[36m%s\x1b[0m', '|     ­Ъј» Bot ─Љ├Б khр╗Ъi ─Љр╗Ўng th├аnh c├┤ng!');

  if (client.config.voteManager.status === true && client.config.voteManager.api_key) {
    const { AutoPoster } = require('toggle-autoposter')
    const ap = AutoPoster(client.config.voteManager.api_key, client)
    ap.on('posted', () => { })
  }
}