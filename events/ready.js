const { EmbedBuilder } = require('discord.js');
const hotReloader = require('../utils/hotReload');
const queueManager = require('../utils/queueManager');
const config = require('../config/config');

const DEFAULT_THUMBNAIL = 'https://cdn.discordapp.com/embed/avatars/0.png';
let nowPlayingMsg = null;
let progressInterval = null;
let currentlyPlaying = {}; // { guildId: songId }
let processingPlaylist = {}; // { guildId: boolean } - T·∫°m d·ª´ng removeFirst khi ƒëang x·ª≠ l√Ω playlist

module.exports = async(client) => {
  console.log(`[‚úî] Bot ƒëang ch·∫°y v·ªõi t√™n ${client.user.tag} - H·ªÜ TH·ªêNG T·∫¢I ƒê·ªòNG!`);
  
  // Kh·ªüi ƒë·ªông tr√¨nh t·∫£i ƒë·ªông ƒë·ªÉ theo d√µi t·∫•t c·∫£ t·ªáp
  hotReloader.startWatching();

  client.distube
    .on('playSong', async (queue, song) => {
      if (progressInterval) clearInterval(progressInterval);
      nowPlayingMsg = null;
      // Ghi log li√™n k·∫øt th·ª±c t·∫ø v√† ngu·ªìn
      const config = hotReloader.getCurrentConfig();
      if (config.debug) console.log('[DisTube] ƒêang ph√°t:', song.name, '| Li√™n k·∫øt:', song.url, '| Th·ªùi l∆∞·ª£ng:', song.duration, '| Ngu·ªìn:', song.source || song.streamURL || 'kh√¥ng x√°c ƒë·ªãnh');
      
      // Ch·ªâ x√≥a b√†i tr∆∞·ªõc ƒë√≥ n·∫øu KH√îNG ƒëang x·ª≠ l√Ω danh s√°ch ph√°t v√† KH√îNG ·ªü repeat mode
      if (currentlyPlaying[queue.id] && !processingPlaylist[queue.id] && queue.repeatMode !== 1 && queue.repeatMode !== 2) {
        queueManager.removeFirst(queue.id);
        const config = hotReloader.getCurrentConfig();
        if (config.debug) console.log(`[DisTube] ƒê√£ x√≥a b√†i tr∆∞·ªõc kh·ªèi qu·∫£n l√Ω h√†ng ƒë·ª£i cho m√°y ch·ªß ${queue.id}`);
      } else if (processingPlaylist[queue.id]) {
        const config = hotReloader.getCurrentConfig();
        if (config.debug) console.log(`[DisTube] B·ªè qua removeFirst - ƒëang x·ª≠ l√Ω danh s√°ch ph√°t cho m√°y ch·ªß ${queue.id}`);
      } else if (queue.repeatMode === 1) {
        const config = hotReloader.getCurrentConfig();
        if (config.debug) console.log(`[DisTube] B·ªè qua removeFirst - ƒëang ·ªü ch·∫ø ƒë·ªô l·∫∑p l·∫°i b√†i h√°t cho m√°y ch·ªß ${queue.id}`);
      } else if (queue.repeatMode === 2) {
        const config = hotReloader.getCurrentConfig();
        if (config.debug) console.log(`[DisTube] B·ªè qua removeFirst - ƒëang ·ªü ch·∫ø ƒë·ªô l·∫∑p l·∫°i h√†ng ƒë·ª£i cho m√°y ch·ªß ${queue.id}`);
      }
      
      // C·∫≠p nh·∫≠t b√†i ƒëang ph√°t hi·ªán t·∫°i
      currentlyPlaying[queue.id] = song.id || song.url;
      
      // Expose currentlyPlaying qua client ƒë·ªÉ c√°c l·ªánh kh√°c c√≥ th·ªÉ truy c·∫≠p
      if (!client.distube.currentlyPlaying) client.distube.currentlyPlaying = {};
      client.distube.currentlyPlaying[queue.id] = song.id || song.url;
    })
    .on('addSong', (queue, song) => {
      if (queue.songs.length > 1) {
        // KH√îNG g·ª≠i embed ·ªü ƒë√¢y n·ªØa
      }
      // ƒê·ªìng b·ªô qu·∫£n l√Ω h√†ng ƒë·ª£i khi th√™m b√†i m·ªõi (v·ªõi ƒë·ªô tr·ªÖ nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o h√†ng ƒë·ª£i ƒë√£ c·∫≠p nh·∫≠t)
      setTimeout(() => {
        queueManager.syncFromDisTube(queue.id, queue);
      }, 100);
    })
    .on('finish', queue => {
      if (progressInterval) clearInterval(progressInterval);
      nowPlayingMsg = null;
      const botName = queue.distube.client.user.username;
      const botAvatar = queue.distube.client.user.displayAvatarURL();
      const embed = new EmbedBuilder()
        .setTitle('üé∂ __**H·∫æT NH·∫†C R·ªíI!**__')
        .setDescription('**T·∫•t c·∫£ b√†i h√°t trong h√†ng ƒë·ª£i ƒë√£ ƒë∆∞·ª£c ph√°t xong.**\n\n**H√£y th√™m b√†i m·ªõi ƒë·ªÉ ti·∫øp t·ª•c t·∫≠n h∆∞·ªüng √¢m nh·∫°c!**')
        .setColor(0x8e44ad)
        .setThumbnail('https://cdn-icons-png.flaticon.com/512/727/727245.png')
        .setFooter({ text: botName, iconURL: botAvatar });
      queue.textChannel.send({ embeds: [embed] });
      
      // Logic t·ª± r·ªùi khi h·∫øt nh·∫°c
      const config = hotReloader.getCurrentConfig();
      if (config.leaveOnEmpty?.finish?.enabled) {
        setTimeout(async () => {
          // Ki·ªÉm tra l·∫°i h√†ng ƒë·ª£i sau th·ªùi gian ch·ªù
          const curQueue = queue.distube.getQueue(queue.id);
          if (!curQueue || !curQueue.songs || curQueue.songs.length === 0) {
            try {
              // H·∫øt nh·∫°c v√† th·ªùi gian ch·ªù ƒë√£ qua, r·ªùi lu√¥n (kh√¥ng c·∫ßn ki·ªÉm tra ng∆∞·ªùi d√πng)
              const guild = queue.textChannel.guild;
              
              try {
                await queue.distube.voices.leave(queue.id);
                if (config.debug) console.log(`[T·ª± R·ªùi-H·∫øt Nh·∫°c] Bot ƒë√£ r·ªùi k√™nh tho·∫°i sau khi h·∫øt nh·∫°c - ${guild.name}`);
                
                // D·ªçn d·∫πp b·ªï sung ƒë·ªÉ ngƒÉn t·ª± ƒë·ªông tham gia l·∫°i
                const connection = guild.client.voice?.connections?.get(guild.id);
                if (connection) {
                  connection.destroy();
                  if (config.debug) console.log(`[T·ª± R·ªùi-H·∫øt Nh·∫°c] ƒê√£ h·ªßy k·∫øt n·ªëi tho·∫°i - ${guild.name}`);
                }
              } catch (leaveError) {
                // N·∫øu DisTube r·ªùi th·∫•t b·∫°i, th·ª≠ ng·∫Øt k·∫øt n·ªëi th·ªß c√¥ng
                if (config.debug) console.log(`[T·ª± R·ªùi-H·∫øt Nh·∫°c] DisTube r·ªùi th·∫•t b·∫°i, th·ª≠ ng·∫Øt k·∫øt n·ªëi th·ªß c√¥ng - ${guild.name}`);
                try {
                  await guild.members.me.voice.disconnect();
                  if (config.debug) console.log(`[T·ª± R·ªùi-H·∫øt Nh·∫°c] Ng·∫Øt k·∫øt n·ªëi th·ªß c√¥ng th√†nh c√¥ng - ${guild.name}`);
                  
                  // √âp bu·ªôc h·ªßy k·∫øt n·ªëi
                  const connection = guild.client.voice?.connections?.get(guild.id);
                  if (connection) {
                    connection.destroy();
                    if (config.debug) console.log(`[T·ª± R·ªùi-H·∫øt Nh·∫°c] H·ªßy k·∫øt n·ªëi tho·∫°i th·ªß c√¥ng - ${guild.name}`);
                  }
                } catch (disconnectError) {
                  console.error('[T·ª± R·ªùi-H·∫øt Nh·∫°c] L·ªói khi ng·∫Øt k·∫øt n·ªëi th·ªß c√¥ng:', disconnectError.message);
                }
              }
            } catch (e) {
              console.error('[T·ª∞ R·ªúI KHI TR·ªêNG] L·ªói khi r·ªùi k√™nh:', e);
            }
          }
        }, (config.leaveOnEmpty.finish.timeout || 10) * 1000);
      }
      // Khi h·∫øt h√†ng ƒë·ª£i, x√≥a to√†n b·ªô qu·∫£n l√Ω h√†ng ƒë·ª£i v√† b√†i ƒëang ph√°t
      queueManager.clearQueue(queue.id);
      delete currentlyPlaying[queue.id];
      if (client.distube.currentlyPlaying) {
        delete client.distube.currentlyPlaying[queue.id];
      }
    })
    .on('empty', async queue => {
      if (progressInterval) clearInterval(progressInterval);
      nowPlayingMsg = null;
      
      // S·ª± ki·ªán 'empty' c·ªßa DisTube k√≠ch ho·∫°t ngay l·∫≠p t·ª©c khi k√™nh tho·∫°i tr·ªëng
      // Ch√∫ng ta s·∫Ω ƒë·ªÉ voiceStateUpdate x·ª≠ l√Ω logic th·ªùi gian ch·ªù thay th·∫ø
      const config = hotReloader.getCurrentConfig();
      if (config.debug) {
        console.log(`[S·ª± Ki·ªán DisTube Empty] Ph√°t hi·ªán k√™nh tho·∫°i tr·ªëng cho m√°y ch·ªß ${queue.textChannel.guild.name} - ƒë·ªÉ voiceStateUpdate x·ª≠ l√Ω`);
      }
      
      // X√≥a theo d√µi khi h√†ng ƒë·ª£i tr·ªëng
      delete currentlyPlaying[queue.id];
      if (client.distube.currentlyPlaying) {
        delete client.distube.currentlyPlaying[queue.id];
      }
    })
    .on('error', (channel, error) => {
      if (progressInterval) clearInterval(progressInterval);
      nowPlayingMsg = null;
      
      console.error('[S·ª± Ki·ªán L·ªói DisTube]', error);

      let errorMessage = 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';
      if (typeof error === 'string') {
        errorMessage = error;
      } else if (error instanceof Error) {
        errorMessage = error.message;
      } else if (typeof error === 'object' && error !== null && error.message) {
        errorMessage = error.message;
      }

      if (channel && typeof channel.send === 'function') {
        // Tr√°nh g·ª≠i tin nh·∫Øn tr√πng l·∫∑p n·∫øu l·ªói ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü l·ªánh
        if (errorMessage.includes("No result found")) {
            const config = hotReloader.getCurrentConfig();
            if (config.debug) console.log("[L·ªói DisTube] B·ªè qua g·ª≠i tin nh·∫Øn 'No result found' ƒë·ªÉ tr√°nh tr√πng l·∫∑p.");
            return;
        }
        channel.send(`‚ùå C√≥ l·ªói t·ª´ DisTube: ${errorMessage}`);
      }
    });
};

// Xu·∫•t h√†m ƒë·ªÉ c√°c n·ªÅn t·∫£ng c√≥ th·ªÉ ki·ªÉm so√°t
module.exports.setProcessingPlaylist = (guildId, status) => {
  processingPlaylist[guildId] = status;
  const config = hotReloader.getCurrentConfig();
  if (config.debug) console.log(`[S·ª± Ki·ªán] ƒê·∫∑t x·ª≠ l√Ω danh s√°ch ph√°t cho m√°y ch·ªß ${guildId}: ${status}`);
};
